{
    "version": "https://jsonfeed.org/version/1",
    "title": "一个小萌新的进阶之路 • All posts by \"go\" tag",
    "description": "",
    "home_page_url": "https://hahayixiao2.github.io",
    "items": [
        {
            "id": "https://hahayixiao2.github.io/computer-science/GO/gobase/gostudy/go/",
            "url": "https://hahayixiao2.github.io/computer-science/GO/gobase/gostudy/go/",
            "title": "Go语言",
            "date_published": "2022-05-09T10:15:48.000Z",
            "content_html": "<h1 id=\"go语言简介\"><a class=\"markdownIt-Anchor\" href=\"#go语言简介\">#</a> go 语言简介</h1>\n<p>Go（又称 Golang）是 Google 的 Robert Griesemer，Rob Pike 及 Ken Thompson 开发的一种静态强类型、编译型语言。Go 语言语法与 C 相近，但功能上有：内存安全，GC（垃圾回收），结构形态及 CSP-style 并发计算。</p>\n<h2 id=\"go语言特点\"><a class=\"markdownIt-Anchor\" href=\"#go语言特点\">#</a> go 语言特点</h2>\n<ol>\n<li>背靠大厂，google 背书，可靠</li>\n<li>天生支持并发（最显著特点）</li>\n<li>语法简单，容易上手</li>\n<li>内置 runtime，支持垃圾回收</li>\n<li>可直接编译成机器码，不依赖其他库</li>\n<li>丰富的标准库</li>\n<li>跨平台编译</li>\n</ol>\n<h2 id=\"go语言的应用领域\"><a class=\"markdownIt-Anchor\" href=\"#go语言的应用领域\">#</a> go 语言的应用领域</h2>\n<ol>\n<li>服务器编程</li>\n<li>开发云平台</li>\n<li>区块链</li>\n<li>分布式系统</li>\n<li>网络编程</li>\n</ol>\n<h2 id=\"那些公司项目在使用go语言\"><a class=\"markdownIt-Anchor\" href=\"#那些公司项目在使用go语言\">#</a> 那些公司（项目）在使用 go 语言</h2>\n<h3 id=\"公司\"><a class=\"markdownIt-Anchor\" href=\"#公司\">#</a> 公司</h3>\n<ol>\n<li>\n<p><strong>Google</strong></p>\n<p>k8s</p>\n</li>\n<li>\n<p><strong>Facebook</strong></p>\n<p>facebookgo</p>\n</li>\n<li>\n<p><strong>腾讯</strong></p>\n<p>蓝鲸平台</p>\n<p>容器技术</p>\n</li>\n<li>\n<p><strong>百度</strong></p>\n<p>运维项目 BFE</p>\n</li>\n<li>\n<p><strong>京东</strong></p>\n<p>消息推送系统、云存储、京东商城</p>\n</li>\n<li>\n<p><strong>小米</strong></p>\n<p>运维监控系统、小米互娱、小米商城、小米视频、小米生态链</p>\n</li>\n<li>\n<p><strong>360</strong></p>\n<p>日志搜索系统 Poseidon</p>\n</li>\n</ol>\n<h1 id=\"go语言开发环境搭建\"><a class=\"markdownIt-Anchor\" href=\"#go语言开发环境搭建\">#</a> go 语言开发环境搭建</h1>\n<h2 id=\"windows平台\"><a class=\"markdownIt-Anchor\" href=\"#windows平台\">#</a> windows 平台</h2>\n<h3 id=\"下载安装并配置环境变量\"><a class=\"markdownIt-Anchor\" href=\"#下载安装并配置环境变量\">#</a> 下载安装并配置环境变量</h3>\n<p>下载地址： <code>https://golang.google.cn/dl/</code> ，这里提供了不同平台的 go 版本，根据自己的平台选择下载。</p>\n<p>这里注意，安装路径选择一个比较好找的路径，例如： <code>c:/go</code> ，其他安装都选择” 下一步 “即可。</p>\n<p>安装完成后，把 <code>C:\\go\\bin</code>  目录添加到环境变量，这里就可以使用 go 了，在命令行输入  <code>go version</code>  查看版本，输出结果如下所示。</p>\n<pre><code>go version go1.16.6 windows/amd64\n</code></pre>\n<h3 id=\"配置go环境\"><a class=\"markdownIt-Anchor\" href=\"#配置go环境\">#</a> 配置 go 环境</h3>\n<pre><code>$env:GO111MODULE = &quot;on&quot;\n$env:GOPROXY = &quot;http://goproxy.cn&quot;\n</code></pre>\n<blockquote>\n<p>使用使用 go mod 管理库，需要科学上网</p>\n</blockquote>\n<h3 id=\"安装配置git\"><a class=\"markdownIt-Anchor\" href=\"#安装配置git\">#</a> 安装配置 git</h3>\n<pre><code>https://www.git-scm.com/download/\n</code></pre>\n<p>配置环境变量，命令行输入 git 测试</p>\n<h2 id=\"goroot和gopath\"><a class=\"markdownIt-Anchor\" href=\"#goroot和gopath\">#</a> goroot 和 gopath</h2>\n<p>goroot 就是 go 安装的根目录，gopath 就是 go 项目所在的路径，高版本 go 项目已经不再依赖 gopath 来管理项目，使用 go mod 来管理项目。</p>\n<h2 id=\"linux平台\"><a class=\"markdownIt-Anchor\" href=\"#linux平台\">#</a> Linux 平台</h2>\n<p>如果不是要在 Linux 平台敲 go 代码就不需要在 Linux 平台安装 Go，我们开发机上写好的 go 代码只需要跨平台编译（详见文章末尾的跨平台编译）好之后就可以拷贝到 Linux 服务器上运行了，这也是 go 程序跨平台易部署的优势。</p>\n<p>我们在版本选择页面选择并下载好 <code>go1.14.1.linux-amd64.tar.gz</code>  文件：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">wget</span> https://dl.google.com/go/go1.14.1.linux-amd64.tar.gz</pre></td></tr></table></figure><p>将下载好的文件解压到 <code>/usr/local</code>  目录下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">tar</span> -zxvf go1.14.1.linux-amd64.tar.gz -C /usr/local  <span class=\"token comment\"># 解压</span></pre></td></tr></table></figure><p>如果提示没有权限，加上 <code>sudo</code>  以 root 用户的身份再运行。执行完就可以在 <code>/usr/local/</code>  下看到 <code>go</code>  目录了。</p>\n<p>配置环境变量： Linux 下有两个文件可以配置环境变量，其中 <code>/etc/profile</code>  是对所有用户生效的； <code>$HOME/.profile</code>  是对当前用户生效的，根据自己的情况自行选择一个文件打开，添加如下两行代码，保存退出。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">GOROOT</span><span class=\"token operator\">=</span>/usr/local/go</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token environment constant\">$PATH</span><span class=\"token builtin class-name\">:</span><span class=\"token variable\">$GOROOT</span>/bin</pre></td></tr></table></figure><p>修改 <code>/etc/profile</code>  后要重启生效，修改 <code>$HOME/.profile</code>  后使用 source 命令加载 <code>$HOME/.profile</code>  文件即可生效。 检查：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>~ go version</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>go version go1.16.6 linux/amd64</pre></td></tr></table></figure><h2 id=\"mac平台\"><a class=\"markdownIt-Anchor\" href=\"#mac平台\">#</a> Mac 平台</h2>\n<p>下载可执行文件版，直接点击<strong>下一步</strong>安装即可，默认会将 go 安装到 <code>/usr/local/go</code>  目录下。</p>\n<p>上一步安装过程执行完毕后，可以打开终端窗口，输入 <code>go version</code>  命令，查看安装的 Go 版本。</p>\n<pre><code>go version go1.16.6 darwin/amd64\n</code></pre>\n<h2 id=\"开发工具简介\"><a class=\"markdownIt-Anchor\" href=\"#开发工具简介\">#</a> 开发工具简介</h2>\n<p>golang 的开发工具有很多，例如：</p>\n<ol>\n<li>vim</li>\n<li>sublime</li>\n<li>atom</li>\n<li>LiteIDE</li>\n<li>eclipse</li>\n<li>goland</li>\n<li>vscode</li>\n</ol>\n<h2 id=\"使用goland开发go应用\"><a class=\"markdownIt-Anchor\" href=\"#使用goland开发go应用\">#</a> 使用 goland 开发 go 应用</h2>\n<p>goland 是一款付费的、功能强大的 golang 集成开发环境，是 Jetbrain 公司的产品。下载地址： <code>https://www.jetbrains.com/go/</code> goland 非常智能，几乎不需要配置，安装即用。</p>\n<h2 id=\"使用vscode开发go应用\"><a class=\"markdownIt-Anchor\" href=\"#使用vscode开发go应用\">#</a> 使用 vscode 开发 go 应用</h2>\n<ol>\n<li>下载安装 vscode  <code>https://code.visualstudio.com/</code></li>\n<li>下载安装插件，参考文档： <code>https://marketplace.visualstudio.com/items?itemName=golang.go</code></li>\n<li>安装 code runner 运行脚本</li>\n</ol>\n<h1 id=\"go常用命令\"><a class=\"markdownIt-Anchor\" href=\"#go常用命令\">#</a> go 常用命令</h1>\n<h2 id=\"查看可用命令\"><a class=\"markdownIt-Anchor\" href=\"#查看可用命令\">#</a> 查看可用命令</h2>\n<p>直接在终端中输入  <code>go help</code>  即可显示所有的 go 命令以及相应命令功能简介，主要有下面这些:</p>\n<ul>\n<li>build: 编译包和依赖</li>\n<li>clean: 移除对象文件</li>\n<li>doc: 显示包或者符号的文档</li>\n<li>env: 打印 go 的环境信息</li>\n<li>bug: 启动错误报告</li>\n<li>fix: 运行 go tool fix</li>\n<li>fmt: 运行 gofmt 进行格式化</li>\n<li>generate: 从 processing source 生成 go 文件</li>\n<li>get: 下载并安装包和依赖</li>\n<li>install: 编译并安装包和依赖</li>\n<li>list: 列出包</li>\n<li>run: 编译并运行 go 程序</li>\n<li>test: 运行测试</li>\n<li>tool: 运行 go 提供的工具</li>\n<li>version: 显示 go 的版本</li>\n<li>vet: 运行 go tool vet</li>\n</ul>\n<h2 id=\"参考文档\"><a class=\"markdownIt-Anchor\" href=\"#参考文档\">#</a> 参考文档</h2>\n<pre><code>https://golang.org/doc/cmd\n</code></pre>\n<h1 id=\"golang开发-vscode快捷键\"><a class=\"markdownIt-Anchor\" href=\"#golang开发-vscode快捷键\">#</a> golang 开发 vscode 快捷键</h1>\n<h2 id=\"快捷键位置\"><a class=\"markdownIt-Anchor\" href=\"#快捷键位置\">#</a> 快捷键位置</h2>\n<pre><code>File-&gt;Preferences-&gt;Keyboard Shortcuts\n</code></pre>\n<h2 id=\"常用快捷键\"><a class=\"markdownIt-Anchor\" href=\"#常用快捷键\">#</a> 常用快捷键</h2>\n<pre><code>1. 行注释 ctrl + /\n2. 块注释 shift+alt+a (可以修改为ctrl+shift+/)\n3. ctrl+a 全选\n4. ctrl+c 复制\n5. ctrl+v 粘贴\n6. ctrl+shift+k 删除行\n7. ctrl+e查找文件\n8. ctrl+shift+p 打开设置命令行\n</code></pre>\n<h2 id=\"修改快捷键\"><a class=\"markdownIt-Anchor\" href=\"#修改快捷键\">#</a> 修改快捷键</h2>\n<ol>\n<li>打开快捷键  <code>File-&gt;Preferences-&gt;Keyboard Shortcuts</code></li>\n<li>双击要修改的快捷键</li>\n<li>键盘输入想要使用的快捷键</li>\n</ol>\n<h2 id=\"快速生成代码片段\"><a class=\"markdownIt-Anchor\" href=\"#快速生成代码片段\">#</a> 快速生成代码片段</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>pkgm  main包<span class=\"token operator\">+</span>main主函数</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>ff  fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">var</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">for</span> <span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>forr <span class=\"token keyword\">for</span> <span class=\"token boolean\">_</span><span class=\"token punctuation\">,</span> v <span class=\"token operator\">:=</span> <span class=\"token keyword\">range</span> v <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmain <span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>a<span class=\"token punctuation\">.</span><span class=\"token builtin\">print</span><span class=\"token operator\">!</span> fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a: %v\\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"如何编写golang代码\"><a class=\"markdownIt-Anchor\" href=\"#如何编写golang代码\">#</a> 如何编写 golang 代码</h1>\n<h2 id=\"代码组织\"><a class=\"markdownIt-Anchor\" href=\"#代码组织\">#</a> 代码组织</h2>\n<p>go 应用使用<strong>包</strong>和<strong>模块</strong>来组织代码，包对应到文件系统就是文件夹，模块就是 **.go** 的 go 源文件。一个包中会有多个模块，或者多个子包。</p>\n<h2 id=\"go项目管理工具\"><a class=\"markdownIt-Anchor\" href=\"#go项目管理工具\">#</a> go 项目管理工具</h2>\n<p>早期的 go 项目使用 gopath 来管理项目，不方便而且容易出错，从 golang 1.11 开始使用 gomod 管理项目，当然还有第三方模块例如 govendor，我们给大家结束 gomod 的使用</p>\n<h2 id=\"实现步骤\"><a class=\"markdownIt-Anchor\" href=\"#实现步骤\">#</a> 实现步骤</h2>\n<ol>\n<li>创建项目</li>\n<li>初始化项目</li>\n<li>创建包</li>\n<li>创建模块</li>\n<li>相互调用</li>\n</ol>\n<h1 id=\"golang标识符-关键字-命名规则\"><a class=\"markdownIt-Anchor\" href=\"#golang标识符-关键字-命名规则\">#</a> golang 标识符、关键字、命名规则</h1>\n<h2 id=\"标识符\"><a class=\"markdownIt-Anchor\" href=\"#标识符\">#</a> 标识符</h2>\n<p>标识符的英文是 <code>identifier</code> ，通俗的讲，就是给变量、常量、函数、方法、结构体、数组、切片、接口起名字。</p>\n<h3 id=\"标识符的组成\"><a class=\"markdownIt-Anchor\" href=\"#标识符的组成\">#</a> 标识符的组成</h3>\n<ol>\n<li>标识符由数字、字母和下划线 ( <code>_</code> ) 组成。123 abc _</li>\n<li>只能以字母和下划线 ( <code>_</code> )<strong> 开头</strong>。abc123 _sysVar 123abc</li>\n<li>标识符区分大小写。 name Name NAME</li>\n</ol>\n<h3 id=\"举例说明标识符的命名\"><a class=\"markdownIt-Anchor\" href=\"#举例说明标识符的命名\">#</a> 举例说明标识符的命名</h3>\n<p><strong>正确的命名</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> age <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">var</span> _sys <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>错误的标识符</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">var</span> 1name <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token operator\">&amp;</span>age <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token operator\">!</span>email</pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"go语言关键字\"><a class=\"markdownIt-Anchor\" href=\"#go语言关键字\">#</a> go 语言关键字</h2>\n<p>go 语言提供了 25 个关键字，如下所示。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">break</th>\n<th style=\"text-align:left\">default</th>\n<th style=\"text-align:left\">func</th>\n<th style=\"text-align:left\">interface</th>\n<th style=\"text-align:left\">select</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">case</td>\n<td style=\"text-align:left\">defer</td>\n<td style=\"text-align:left\">go</td>\n<td style=\"text-align:left\">map</td>\n<td style=\"text-align:left\">struct</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">chan</td>\n<td style=\"text-align:left\">else</td>\n<td style=\"text-align:left\">goto</td>\n<td style=\"text-align:left\">package</td>\n<td style=\"text-align:left\">switch</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">const</td>\n<td style=\"text-align:left\">fallthrough</td>\n<td style=\"text-align:left\">if</td>\n<td style=\"text-align:left\">range</td>\n<td style=\"text-align:left\">type</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">continue</td>\n<td style=\"text-align:left\">for</td>\n<td style=\"text-align:left\">import</td>\n<td style=\"text-align:left\">return</td>\n<td style=\"text-align:left\">var</td>\n</tr>\n</tbody>\n</table>\n<p>除了以上介绍的这些关键字，Go 语言还有 36 个预定义标识符，其中包含了基本类型的名称和一些基本的内置函数，见下表：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">append</th>\n<th style=\"text-align:left\">bool</th>\n<th style=\"text-align:left\">byte</th>\n<th style=\"text-align:left\">cap</th>\n<th style=\"text-align:left\">close</th>\n<th style=\"text-align:left\">complex</th>\n<th style=\"text-align:left\">complex64</th>\n<th style=\"text-align:left\">complex128</th>\n<th style=\"text-align:left\">uint16</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">copy</td>\n<td style=\"text-align:left\">false</td>\n<td style=\"text-align:left\">float32</td>\n<td style=\"text-align:left\">float64</td>\n<td style=\"text-align:left\">imag</td>\n<td style=\"text-align:left\">int</td>\n<td style=\"text-align:left\">int8</td>\n<td style=\"text-align:left\">int16</td>\n<td style=\"text-align:left\">uint32</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">int32</td>\n<td style=\"text-align:left\">int64</td>\n<td style=\"text-align:left\">iota</td>\n<td style=\"text-align:left\">len</td>\n<td style=\"text-align:left\">make</td>\n<td style=\"text-align:left\">new</td>\n<td style=\"text-align:left\">nil</td>\n<td style=\"text-align:left\">panic</td>\n<td style=\"text-align:left\">uint64</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">print</td>\n<td style=\"text-align:left\">println</td>\n<td style=\"text-align:left\">real</td>\n<td style=\"text-align:left\">recover</td>\n<td style=\"text-align:left\">string</td>\n<td style=\"text-align:left\">true</td>\n<td style=\"text-align:left\">uint</td>\n<td style=\"text-align:left\">uint8</td>\n<td style=\"text-align:left\">uintptr</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"go语言命名规范\"><a class=\"markdownIt-Anchor\" href=\"#go语言命名规范\">#</a> go 语言命名规范</h2>\n<h3 id=\"go是一门区分大小写的语言\"><a class=\"markdownIt-Anchor\" href=\"#go是一门区分大小写的语言\">#</a> Go 是一门区分大小写的语言</h3>\n<p>命名规则涉及变量、常量、全局函数、结构、接口、方法等的命名。 Go 语言从语法层面进行了以下限定：任何需要对外暴露的名字必须以大写字母开头，不需要对外暴露的则应该以小写字母开头。</p>\n<p>当命名（包括常量、变量、类型、函数名、结构字段等等）以一个大写字母开头，如： <code>GetUserName</code> ，那么使用这种形式的标识符的对象就<strong>可以被外部包的代码所使用</strong>（客户端程序需要先导入这个包），这被称为导出（像面向对象语言中的  <code>public</code> ）； <strong>命名如果以小写字母开头，则对包外是不可见的，但是他们在整个包的内部是可见并且可用的</strong>（像面向对象语言中的  <code>private</code>  ）</p>\n<h3 id=\"包名称\"><a class=\"markdownIt-Anchor\" href=\"#包名称\">#</a> 包名称</h3>\n<p>保持 <code>package</code>  的名字和目录保持一致，尽量采取有意义的包名，简短，有意义，尽量和标准库不要冲突。包名应该为<strong>小写</strong>单词，不要使用下划线或者混合大小写。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> dao</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">package</span> service</pre></td></tr></table></figure><h3 id=\"文件命名\"><a class=\"markdownIt-Anchor\" href=\"#文件命名\">#</a> 文件命名</h3>\n<p>尽量采取有意义的文件名，简短，有意义，应该为<strong>小写</strong>单词，使用<strong>下划线</strong>分隔各个单词。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>customer_dao<span class=\"token punctuation\">.</span><span class=\"token keyword\">go</span></pre></td></tr></table></figure><h3 id=\"结构体命名\"><a class=\"markdownIt-Anchor\" href=\"#结构体命名\">#</a> 结构体命名</h3>\n<p>采用<strong>驼峰命名法</strong>，首字母根据访问控制大写或者小写</p>\n<p><code>struct</code>  申明和初始化格式采用多行，例如下面：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> CustomerOrder <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>    Name <span class=\"token builtin\">string</span> </pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    Address <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>order <span class=\"token operator\">:=</span> CustomerOrder<span class=\"token punctuation\">&#123;</span><span class=\"token string\">\"tom\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"北京海淀\"</span><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"接口命名\"><a class=\"markdownIt-Anchor\" href=\"#接口命名\">#</a> 接口命名</h3>\n<p>命名规则基本和上面的结构体类型</p>\n<p>单个函数的结构名以 <strong>“er”</strong> 作为后缀，例如  <code>Reader</code>  ,  <code>Writer</code>  。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Reader <span class=\"token keyword\">interface</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>     <span class=\"token function\">Read</span><span class=\"token punctuation\">(</span>p <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token builtin\">byte</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>n <span class=\"token builtin\">int</span><span class=\"token punctuation\">,</span> err <span class=\"token builtin\">error</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"变量命名\"><a class=\"markdownIt-Anchor\" href=\"#变量命名\">#</a> 变量命名</h3>\n<p>和结构体类似，变量名称一般遵循<strong>驼峰法</strong>，首字母根据访问控制原则大写或者小写，但遇到特有名词时，需要遵循以下规则：</p>\n<p>如果变量为私有，且特有名词为首个单词，则使用小写，如 appService 若变量类型为 bool 类型，则名称应以 Has, Is, Can 或 Allow 开头</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> isExist <span class=\"token builtin\">bool</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">var</span> hasConflict <span class=\"token builtin\">bool</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> canManage <span class=\"token builtin\">bool</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token keyword\">var</span> allowGitHook <span class=\"token builtin\">bool</span></pre></td></tr></table></figure><h3 id=\"常量命名\"><a class=\"markdownIt-Anchor\" href=\"#常量命名\">#</a> 常量命名</h3>\n<p>常量均需使用全部<strong>大写</strong>字母组成，并使用<strong>下划线分词</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> APP_URL <span class=\"token operator\">=</span> <span class=\"token string\">\"https://www.duoke360.com\"</span></pre></td></tr></table></figure><p>如果是枚举类型的常量，需要先创建相应类型：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">type</span> Scheme <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">const</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    HTTP  Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"http\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    HTTPS Scheme <span class=\"token operator\">=</span> <span class=\"token string\">\"https\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h3 id=\"错误处理\"><a class=\"markdownIt-Anchor\" href=\"#错误处理\">#</a> 错误处理</h3>\n<p>错误处理的原则就是不能丢弃任何有返回 err 的调用，不要使用 _ 丢弃，必须全部处理。接收到错误，要么返回 err，或者使用 log 记录下来尽早 return：一旦有错误发生，马上返回，尽量不要使用 panic，除非你知道你在做什么，错误描述如果是英文必须为小写，不需要标点结尾，采用独立的错误流进行处理</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\">// 错误写法</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token comment\">// 错误处理</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    <span class=\"token comment\">// 正常代码</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token comment\">// 正确写法</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">if</span> err <span class=\"token operator\">!=</span> <span class=\"token boolean\">nil</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>    <span class=\"token comment\">// 错误处理</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token keyword\">return</span> <span class=\"token comment\">// 或者继续</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token comment\">// 正常代码</span></pre></td></tr></table></figure><h3 id=\"单元测试\"><a class=\"markdownIt-Anchor\" href=\"#单元测试\">#</a> 单元测试</h3>\n<p>单元测试文件名命名规范为  <code>example_test.go</code>  测试用例的函数名称必须以  <code>Test</code>  开头，例如： <code>TestExample</code>  每个重要的函数都要首先编写测试用例，测试用例和正规代码一起提交方便进行回归测试 。</p>\n<h1 id=\"golang变量\"><a class=\"markdownIt-Anchor\" href=\"#golang变量\">#</a> golang 变量</h1>\n<p>变量是计算机语言中能<strong>储存</strong>计算结果或能表示值的抽象概念。不同的变量保存的<strong>数据类型</strong>可能会不一样。</p>\n<h2 id=\"声明变量\"><a class=\"markdownIt-Anchor\" href=\"#声明变量\">#</a> 声明变量</h2>\n<p>Go 语言中的变量需要声明后才能使用，同一作用域内不支持重复声明。 并且 Go 语言的变量声明后<strong>必须使用</strong>。</p>\n<p><strong>声明变量的语法</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> identifier <span class=\"token keyword\">type</span></pre></td></tr></table></figure><p><code>var</code> ：声明变量关键字</p>\n<p><code>identifier</code> ：变量名称</p>\n<p><code>type</code> ：变量类型</p>\n<p><strong>例如</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> age <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">var</span> ok <span class=\"token builtin\">bool</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h3 id=\"批量声明\"><a class=\"markdownIt-Anchor\" href=\"#批量声明\">#</a> 批量声明</h3>\n<p>使用一个 <code>var</code>  关键字，把一些变量写在一个括号 <code>()</code>  里</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t\tname <span class=\"token builtin\">string</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t\tage  <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\tok   <span class=\"token builtin\">bool</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"变量的初始化\"><a class=\"markdownIt-Anchor\" href=\"#变量的初始化\">#</a> 变量的初始化</h2>\n<p>Go 语言在声明变量的时候，会自动对变量对应的内存区域进行初始化操作。每个变量会被初始化成其类型的默认值，例如： 整型和浮点型变量的默认值为 <code>0</code> 。 字符串变量的默认值为空字符串 <code>“”</code> 。 布尔型变量默认为 <code>false</code> 。 切片、函数、指针变量的默认为 <code>nil</code> 。</p>\n<p><strong>变量初始化语法</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> 变量名 类型 <span class=\"token operator\">=</span> 表达式</pre></td></tr></table></figure><p><strong>例如</strong></p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"老郭\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">var</span> site <span class=\"token builtin\">string</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"www.duoke360.com\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">var</span> age <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>类型推导</strong></p>\n<p>我们在声明变量时，可以根据初始化值进行类型推导，从而省略类型。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> name <span class=\"token operator\">=</span> <span class=\"token string\">\"老郭\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">var</span> site <span class=\"token operator\">=</span> <span class=\"token string\">\"www.duoke360.com\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">var</span> age <span class=\"token operator\">=</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p><strong>初始化多个变量</strong></p>\n<p>可以一次初始化多个变量，中间用逗号分隔。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>\t<span class=\"token keyword\">var</span> name<span class=\"token punctuation\">,</span> site<span class=\"token punctuation\">,</span> age <span class=\"token operator\">=</span> <span class=\"token string\">\"老郭\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"www.duoke360.com\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"短变量声明\"><a class=\"markdownIt-Anchor\" href=\"#短变量声明\">#</a> 短变量声明</h2>\n<p>在<strong>函数内部</strong>，可以使用  <code>:=</code>  运算符对变量进行声明和初始化。</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\tname <span class=\"token operator\">:=</span> <span class=\"token string\">\"老郭\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\tsite <span class=\"token operator\">:=</span> <span class=\"token string\">\"www.duoke360.com\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tage <span class=\"token operator\">:=</span> <span class=\"token number\">20</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：这种方法只适合在函数内部，函数外面不能使用。</p>\n</blockquote>\n<h2 id=\"匿名变量\"><a class=\"markdownIt-Anchor\" href=\"#匿名变量\">#</a> 匿名变量</h2>\n<p>如果我们接收到多个变量，有一些变量使用不到，可以使用下划线 <code>_</code> 表示变量名称，这种变量叫做匿名变量。例如：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">getNameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token builtin\">string</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">return</span> <span class=\"token string\">\"老郭\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">30</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tname<span class=\"token punctuation\">,</span> <span class=\"token boolean\">_</span> <span class=\"token operator\">:=</span> <span class=\"token function\">getNameAndAge</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"name: %v\\n\"</span><span class=\"token punctuation\">,</span> name<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"go语言常量\"><a class=\"markdownIt-Anchor\" href=\"#go语言常量\">#</a> go 语言常量</h1>\n<p>常量，就是在程序编译阶段就确定下来的值，而程序在运行时则无法改变值，在 Go 程序中，常量可以数值类型（包括整形，浮点型和复数类型），布尔类型，字符串类型等</p>\n<p>定义常量的语法</p>\n<p>定义一个常量使用 const 关键字，语法格式如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">const</span> constantName <span class=\"token punctuation\">[</span><span class=\"token keyword\">type</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>value</pre></td></tr></table></figure><p><code>const</code>  : 定义常量关键字</p>\n<p><code>constantName</code>  : 常量名称</p>\n<p><code>type</code> : 常量类型</p>\n<p><code>value</code> : 常量的值</p>\n<p>实例</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token keyword\">const</span> PI  <span class=\"token builtin\">float32</span> <span class=\"token operator\">=</span> <span class=\"token number\">3.14</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">const</span> PI2 <span class=\"token operator\">=</span> <span class=\"token number\">3.15</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PI:%v\\n\"</span><span class=\"token punctuation\">,</span>PI<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">const</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\ta <span class=\"token operator\">=</span><span class=\"token number\">100</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tb<span class=\"token operator\">=</span><span class=\"token number\">200</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a:%v b:%v\\n\"</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">const</span> w<span class=\"token punctuation\">,</span>h <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">,</span><span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"w:%v h:%v\\n\"</span><span class=\"token punctuation\">,</span>w<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"iota\"><a class=\"markdownIt-Anchor\" href=\"#iota\">#</a> iota</h2>\n<p>iota 比较特殊，可以被认为是一个可被编译器修改的常量，它默认开始值是 0，每调用一次加 1，遇到 const 关键字时被重置为 0</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>    <span class=\"token keyword\">const</span><span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>    \ta1 <span class=\"token operator\">=</span><span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>    \ta2 <span class=\"token operator\">=</span><span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>    \ta3 <span class=\"token operator\">=</span><span class=\"token boolean\">iota</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>    fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a1:%v\\n\"</span><span class=\"token punctuation\">,</span>a1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a2:%v\\n\"</span><span class=\"token punctuation\">,</span>a2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"a3:%v\\n\"</span><span class=\"token punctuation\">,</span>a3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"go语言数据类型\"><a class=\"markdownIt-Anchor\" href=\"#go语言数据类型\">#</a> go 语言数据类型</h1>\n<p>在 Go 编程语言中，数据类型用于声明函数和变量。</p>\n<p>数据类型的出现是为了把数据分成所需<strong>内存大小</strong>不同的数据，编程的时候需要用大数据的时候才需要申请大内存，就可以充分利用内存。</p>\n<p>Go 语言按类别有以下几种数据类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>布尔型</strong> 布尔型的值只可以是常量 true 或者 false。一个简单的例子：var b bool = true。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>数字类型</strong> 整型 int 和浮点型 float32、float64，Go 语言支持整型和浮点型数字，并且支持复数，其中位的运算采用补码。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>字符串类型:</strong> 字符串就是一串固定长度的字符连接起来的字符序列。Go 的字符串是由单个字节连接起来的。Go 语言的字符串的字节使用 UTF-8 编码标识 Unicode 文本。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>派生类型:</strong> 包括：(a) 指针类型（Pointer）(b) 数组类型 © 结构化类型 (struct)(d) Channel 类型 (e) 函数类型 (f) 切片类型 (g) 接口类型（interface）(h) Map 类型</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"数字类型\"><a class=\"markdownIt-Anchor\" href=\"#数字类型\">#</a> 数字类型</h2>\n<p>Go 也有基于架构的类型，例如：int、uint 和 uintptr。</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>uint8</strong> 无符号 8 位整型 (0 到 255)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>uint16</strong> 无符号 16 位整型 (0 到 65535)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>uint32</strong> 无符号 32 位整型 (0 到 4294967295)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>uint64</strong> 无符号 64 位整型 (0 到 18446744073709551615)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>int8</strong> 有符号 8 位整型 (-128 到 127)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">6</td>\n<td style=\"text-align:left\"><strong>int16</strong> 有符号 16 位整型 (-32768 到 32767)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">7</td>\n<td style=\"text-align:left\"><strong>int32</strong> 有符号 32 位整型 (-2147483648 到 2147483647)</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">8</td>\n<td style=\"text-align:left\"><strong>int64</strong> 有符号 64 位整型 (-9223372036854775808 到 9223372036854775807)</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"浮点型\"><a class=\"markdownIt-Anchor\" href=\"#浮点型\">#</a> 浮点型</h3>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>float32</strong> IEEE-754 32 位浮点型数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>float64</strong> IEEE-754 64 位浮点型数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>complex64</strong> 32 位实数和虚数</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>complex128</strong> 64 位实数和虚数</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"其他数字类型\"><a class=\"markdownIt-Anchor\" href=\"#其他数字类型\">#</a> 其他数字类型</h2>\n<p>以下列出了其他更多的数字类型：</p>\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">序号</th>\n<th style=\"text-align:left\">类型和描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\">1</td>\n<td style=\"text-align:left\"><strong>byte</strong> 类似 uint8</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">2</td>\n<td style=\"text-align:left\"><strong>rune</strong> 类似 int32</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">3</td>\n<td style=\"text-align:left\"><strong>uint</strong> 32 或 64 位</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">4</td>\n<td style=\"text-align:left\"><strong>int</strong> 与 uint 一样大小</td>\n</tr>\n<tr>\n<td style=\"text-align:left\">5</td>\n<td style=\"text-align:left\"><strong>uintptr</strong> 无符号整型，用于存放一个指针</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"go语言布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#go语言布尔类型\">#</a> go 语言布尔类型</h1>\n<p>go 语言中的布尔类型有两个常量值： <code>true</code>  和 <code>false</code> 。布尔类型经常用在<strong>条件判断</strong>语句，或者<strong>循环语句</strong>。也可以用在<strong>逻辑表达式</strong>中。</p>\n<h2 id=\"布尔类型\"><a class=\"markdownIt-Anchor\" href=\"#布尔类型\">#</a> 布尔类型</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token keyword\">var</span> b1 <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> b2 <span class=\"token builtin\">bool</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">var</span> b3 <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">var</span> b4 <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\tb5 <span class=\"token operator\">:=</span> <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\tb6 <span class=\"token operator\">:=</span> <span class=\"token boolean\">false</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b1: %v\\n\"</span><span class=\"token punctuation\">,</span> b1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b2: %v\\n\"</span><span class=\"token punctuation\">,</span> b2<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b3: %v\\n\"</span><span class=\"token punctuation\">,</span> b3<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b4: %v\\n\"</span><span class=\"token punctuation\">,</span> b4<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b5: %v\\n\"</span><span class=\"token punctuation\">,</span> b5<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"b6: %v\\n\"</span><span class=\"token punctuation\">,</span> b6<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果</p>\n<pre><code>b1: true\nb2: false\nb3: true\nb4: false\nb5: true\nb6: false\n</code></pre>\n<h2 id=\"用在条件判断中\"><a class=\"markdownIt-Anchor\" href=\"#用在条件判断中\">#</a> 用在条件判断中</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tage <span class=\"token operator\">:=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tok <span class=\"token operator\">:=</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t<span class=\"token keyword\">if</span> ok <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你已经成年\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你还未成年\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果</p>\n<pre><code>你已经成年\n</code></pre>\n<h2 id=\"用在循环语句中\"><a class=\"markdownIt-Anchor\" href=\"#用在循环语句中\">#</a> 用在循环语句中</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tcount <span class=\"token operator\">:=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">for</span> i <span class=\"token operator\">:=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> count<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i: %v\\n\"</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"用在逻辑表达式中\"><a class=\"markdownIt-Anchor\" href=\"#用在逻辑表达式中\">#</a> 用在逻辑表达式中</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\tage <span class=\"token operator\">:=</span> <span class=\"token number\">18</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\tgender <span class=\"token operator\">:=</span> <span class=\"token string\">\"男\"</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\t<span class=\"token keyword\">if</span> age <span class=\"token operator\">>=</span> <span class=\"token number\">18</span> <span class=\"token operator\">&amp;&amp;</span> gender <span class=\"token operator\">==</span> <span class=\"token string\">\"男\"</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"你是成年男子\"</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><blockquote>\n<p>注意：不能使用 <code>0</code>  和非 <code>0</code>  表示真假</p>\n</blockquote>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\ti <span class=\"token operator\">:=</span> <span class=\"token number\">1</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token keyword\">if</span> i <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t\t<span class=\"token comment\">// 编译错误</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token punctuation\">&#125;</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h1 id=\"go语言数字类型\"><a class=\"markdownIt-Anchor\" href=\"#go语言数字类型\">#</a> go 语言数字类型</h1>\n<p>Go 语言支持整型和浮点型数字，并且原生支持复数，其中位的运算采用补码。</p>\n<p>Go 也有基于架构的类型，例如： <code>int</code> 、 <code>uint</code>  和  <code>uintptr</code> 。</p>\n<p>这些类型的长度都是根据运行程序所在的操作系统类型所决定的：</p>\n<ul>\n<li><code>int</code>  和  <code>uint</code>  在 32 位操作系统上，它们均使用 32 位（4 个字节），在 64 位操作系统上，它们均使用 64 位（8 个字节）。</li>\n<li><code>uintptr</code>  的长度被设定为足够存放一个指针即可。</li>\n</ul>\n<p>Go 语言中没有  <code>float</code>  类型。（Go 语言中只有  <code>float32</code>  和  <code>float64</code> ）没有 double 类型。</p>\n<p>与操作系统架构无关的类型都有固定的大小，并在类型的名称中就可以看出来：</p>\n<p>整数：</p>\n<ul>\n<li>int8（-128 -&gt; 127）</li>\n<li>int16（-32768 -&gt; 32767）</li>\n<li>int32（-2,147,483,648 -&gt; 2,147,483,647）</li>\n<li>int64（-9,223,372,036,854,775,808 -&gt; 9,223,372,036,854,775,807）</li>\n</ul>\n<p>无符号整数：</p>\n<ul>\n<li>uint8（0 -&gt; 255）</li>\n<li>uint16（0 -&gt; 65,535）</li>\n<li>uint32（0 -&gt; 4,294,967,295）</li>\n<li>uint64（0 -&gt; 18,446,744,073,709,551,615）</li>\n</ul>\n<p>浮点型（IEEE-754 标准）：</p>\n<ul>\n<li>float32（± 1e-45 -&gt; ± 3.4 * 1e38）</li>\n<li>float64（± 5 * 1e-324 -&gt; 107 * 1e308）</li>\n</ul>\n<p>int 型是计算最快的一种类型。</p>\n<p>整型的零值为 0，浮点型的零值为 0.0。</p>\n<h2 id=\"实例\"><a class=\"markdownIt-Anchor\" href=\"#实例\">#</a> 实例</h2>\n<p>下面实例演示了，各个数字类型的长度和取值范围</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>\t<span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>\t<span class=\"token string\">\"math\"</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token string\">\"unsafe\"</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>\t<span class=\"token keyword\">var</span> i8 <span class=\"token builtin\">int8</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token keyword\">var</span> i16 <span class=\"token builtin\">int16</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">var</span> i32 <span class=\"token builtin\">int32</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\t<span class=\"token keyword\">var</span> i64 <span class=\"token builtin\">int64</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>\t<span class=\"token keyword\">var</span> ui8 <span class=\"token builtin\">uint8</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token keyword\">var</span> ui16 <span class=\"token builtin\">uint16</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">var</span> ui32 <span class=\"token builtin\">uint32</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\t<span class=\"token keyword\">var</span> ui64 <span class=\"token builtin\">uint64</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> i8<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>i8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MinInt8<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxInt8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> i16<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>i16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MinInt16<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxInt16<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"21\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> i32<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>i32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MinInt32<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxInt32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> i64<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>i64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MinInt64<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxInt64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> ui8<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>ui8<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxUint8<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"25\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> ui16<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>ui16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxUint16<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"26\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> ui32<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>ui32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxUint32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"27\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> ui64<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>ui64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">uint64</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"28\"></td><td><pre></pre></td></tr><tr><td data-num=\"29\"></td><td><pre>\t<span class=\"token keyword\">var</span> f32 <span class=\"token builtin\">float32</span></pre></td></tr><tr><td data-num=\"30\"></td><td><pre>\t<span class=\"token keyword\">var</span> f64 <span class=\"token builtin\">float64</span></pre></td></tr><tr><td data-num=\"31\"></td><td><pre></pre></td></tr><tr><td data-num=\"32\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> f32<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>f32<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>MaxFloat32<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxFloat32<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"33\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> f64<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>f64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>math<span class=\"token punctuation\">.</span>MaxFloat64<span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>MaxFloat64<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"34\"></td><td><pre></pre></td></tr><tr><td data-num=\"35\"></td><td><pre>\t<span class=\"token keyword\">var</span> ui <span class=\"token builtin\">uint</span></pre></td></tr><tr><td data-num=\"36\"></td><td><pre>\tui <span class=\"token operator\">=</span> <span class=\"token function\">uint</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxUint64<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 再 + 1 会导致 overflows 错误</span></pre></td></tr><tr><td data-num=\"37\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> ui<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>ui<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> ui<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"38\"></td><td><pre></pre></td></tr><tr><td data-num=\"39\"></td><td><pre>\t<span class=\"token keyword\">var</span> imax<span class=\"token punctuation\">,</span> imin <span class=\"token builtin\">int</span></pre></td></tr><tr><td data-num=\"40\"></td><td><pre>\timax <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MaxInt64<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 再 + 1 会导致 overflows 错误</span></pre></td></tr><tr><td data-num=\"41\"></td><td><pre>\timin <span class=\"token operator\">=</span> <span class=\"token function\">int</span><span class=\"token punctuation\">(</span>math<span class=\"token punctuation\">.</span>MinInt64<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 再 - 1 会导致 overflows 错误</span></pre></td></tr><tr><td data-num=\"42\"></td><td><pre></pre></td></tr><tr><td data-num=\"43\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%T %dB %v~%v\\n\"</span><span class=\"token punctuation\">,</span> imax<span class=\"token punctuation\">,</span> unsafe<span class=\"token punctuation\">.</span><span class=\"token function\">Sizeof</span><span class=\"token punctuation\">(</span>imax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> imin<span class=\"token punctuation\">,</span> imax<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"44\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果</p>\n<pre><code>int8 1B -128~127\nint16 2B -32768~32767\nint32 4B -2147483648~2147483647\nint64 8B -9223372036854775808~9223372036854775807\nuint8 1B 0~255\nuint16 2B 0~65535\nuint32 4B 0~4294967295\nuint64 8B 0~18446744073709551615\nfloat32 4B -3.4028234663852886e+38~3.4028234663852886e+38\nfloat64 8B -1.7976931348623157e+308~1.7976931348623157e+308\nuint 8B 0~18446744073709551615\nint 8B -9223372036854775808~9223372036854775807\n</code></pre>\n<h2 id=\"以二进制-八进制或十六进制浮点数的格式定义数字\"><a class=\"markdownIt-Anchor\" href=\"#以二进制-八进制或十六进制浮点数的格式定义数字\">#</a> 以二进制、八进制或十六进制浮点数的格式定义数字</h2>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>\t<span class=\"token comment\">// 十进制</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>\t<span class=\"token keyword\">var</span> a <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">10</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 10</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%b \\n\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 1010  占位符 % b 表示二进制</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>\t<span class=\"token comment\">// 八进制  以 0 开头</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>\t<span class=\"token keyword\">var</span> b <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">077</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%o \\n\"</span><span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 77</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>\t<span class=\"token comment\">// 十六进制  以 0x 开头</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>\t<span class=\"token keyword\">var</span> c <span class=\"token builtin\">int</span> <span class=\"token operator\">=</span> <span class=\"token number\">0xff</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%x \\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// ff</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>\tfmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%X \\n\"</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span> <span class=\"token comment\">// FF</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><p>运行结果</p>\n<pre><code>10 \n1010 \n77 \nff \nFF \n</code></pre>\n<h2 id=\"浮点型-2\"><a class=\"markdownIt-Anchor\" href=\"#浮点型-2\">#</a> 浮点型</h2>\n<p>Go 语言支持两种浮点型数： <code>float32</code>  和 <code>float64</code> 。这两种浮点型数据格式遵循 <code>IEEE 754</code>  标准：  <code>float32</code>  的浮点数的最大范围约为  <code>3.4e38</code> ，可以使用常量定义： <code>math.MaxFloat32</code> 。  <code>float64</code>  的浮点数的最大范围约为  <code>1.8e308</code> ，可以使用一个常量定义： <code>math.MaxFloat64</code> 。</p>\n<p>打印浮点数时，可以使用 <code>fmt</code>  包配合动词 <code>%f</code> ，代码如下：</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">package</span> main</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token keyword\">import</span> <span class=\"token punctuation\">(</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>        <span class=\"token string\">\"fmt\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token string\">\"math\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token keyword\">func</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%f\\n\"</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>Pi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.2f\\n\"</span><span class=\"token punctuation\">,</span> math<span class=\"token punctuation\">.</span>Pi<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token punctuation\">&#125;</span></pre></td></tr></table></figure><h2 id=\"复数\"><a class=\"markdownIt-Anchor\" href=\"#复数\">#</a> 复数</h2>\n<p>complex64 和 complex128</p>\n<figure class=\"highlight go\"><figcaption data-lang=\"go\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token keyword\">var</span> c1 <span class=\"token builtin\">complex64</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>c1 <span class=\"token operator\">=</span> <span class=\"token number\">1</span> <span class=\"token operator\">+</span> <span class=\"token number\">2i</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token keyword\">var</span> c2 <span class=\"token builtin\">complex128</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>c2 <span class=\"token operator\">=</span> <span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token number\">3i</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c1<span class=\"token punctuation\">)</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>fmt<span class=\"token punctuation\">.</span><span class=\"token function\">Println</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><p>复数有实部和虚部，complex64 的实部和虚部为 32 位，complex128 的实部和虚部为 64 位。</p>\n",
            "tags": [
                "GO"
            ]
        }
    ]
}