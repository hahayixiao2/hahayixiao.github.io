<?xml version="1.0"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://hahayixiao2.github.io</id>
    <title>一个小萌新的进阶之路 • Posts by &#34;docker&#34; tag</title>
    <link href="https://hahayixiao2.github.io" />
    <updated>2022-05-04T05:15:48.000Z</updated>
    <category term="Foo" />
    <category term="Bar" />
    <category term="Hexo" />
    <category term="教程" />
    <category term="Docker" />
    <entry>
        <id>https://hahayixiao2.github.io/computer-science/container/DockerDesktop%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/dockerdesktop/</id>
        <title>dockercompose笔记</title>
        <link rel="alternate" href="https://hahayixiao2.github.io/computer-science/container/DockerDesktop%E5%85%A5%E9%97%A8%E7%AE%80%E4%BB%8B/dockerdesktop/"/>
        <content type="html">&lt;h1 id=&#34;dockerdesktop入门简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#dockerdesktop入门简介&#34;&gt;#&lt;/a&gt; DockerDesktop 入门简介&lt;/h1&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h2&gt;
&lt;p&gt;参考：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWdtZW50ZmF1bHQuY29tL2EvMTE5MDAwMDAyMjA1OTg5NQ==&#34;&gt;https://segmentfault.com/a/1190000022059895&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#介绍&#34;&gt;#&lt;/a&gt; 介绍&lt;/h2&gt;
&lt;p&gt;Docker Desktop 是一款专门为 Windows 和 Mac 提供桌面化的容器开发环境，在 Windows 中，Docker Desktop 使用了 Windows 的 Hyper-V 虚拟化技术，因此需要一台打开了硬件虚拟化的电脑，并且安装的是 Windows10 专业版以上的系统。&lt;/p&gt;
&lt;h2 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h2&gt;
&lt;p&gt;首先到官网下载对应版本的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuZG9ja2VyLmNvbS9wcm9kdWN0cy9kb2NrZXItZGVza3RvcA==&#34;&gt;Docker Desktop 安装包&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装&#34;&gt;#&lt;/a&gt; 安装&lt;/h2&gt;
&lt;p&gt;首先我们需要：启用或关闭 Windows 功能&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;images/image-20201209171318151.png&#34; alt=&#34;image-20201209171318151&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后勾选下面的选项&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;images/image-20201209171418171.png&#34; alt=&#34;image-20201209171418171&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后开始运行我们下载好的 DockerDesktop.exe，我们进行安装过程中，首先会进行一系列的检查，包括是否开启虚拟化，以及是否满足条件&lt;/p&gt;
&lt;h2 id=&#34;运行&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#运行&#34;&gt;#&lt;/a&gt; 运行&lt;/h2&gt;
&lt;p&gt;安装完成后，点击图片 Docker Desktop&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;images/image-20201209170935134.png&#34; alt=&#34;image-20201209170935134&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个问题是因为我们使用的 wsl2 版本太旧，需要我们手动更新一下，首先根据提示去微软官网下载最新版的 wsl2 安装包，然后进行安装：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93c2xzdG9yZXN0b3JhZ2UuYmxvYi5jb3JlLndpbmRvd3MubmV0L3dzbGJsb2Ivd3NsX3VwZGF0ZV94NjQubXNp&#34;&gt;安装包点我传送&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;然后在重新安装，即可完成我们 Docker Desktop&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;images/image-20201209171230973.png&#34; alt=&#34;image-20201209171230973&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后我们打开 powershell 即可查看到我们安装的 docker 版本了&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; --version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;images/image-20201209172301044.png&#34; alt=&#34;image-20201209172301044&#34;&gt;&lt;/p&gt;
&lt;p&gt;下面就可以安装在 Linux 使用 Docker 的操作，到 Windows 进行操作了～&lt;/p&gt;
</content>
        <category term="Docker" />
        <updated>2022-05-04T05:15:48.000Z</updated>
    </entry>
    <entry>
        <id>https://hahayixiao2.github.io/computer-science/container/Docker/docker/</id>
        <title>docker笔记</title>
        <link rel="alternate" href="https://hahayixiao2.github.io/computer-science/container/Docker/docker/"/>
        <content type="html">&lt;h2 id=&#34;docker&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker&#34;&gt;#&lt;/a&gt; docker&lt;/h2&gt;
&lt;h3 id=&#34;10-docker-安装步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10-docker-安装步骤&#34;&gt;#&lt;/a&gt; 1.0 docker 安装步骤&lt;/h3&gt;
&lt;p&gt;&lt;img data-src=&#34;/%E5%AE%89%E8%A3%85%E6%B5%81%E7%A8%8B.png&#34; alt=&#34;安装流程&#34;&gt;&lt;/p&gt;
&lt;p&gt;运行 docker run hello-world 能出现这个说明 docker 已经安装成功了！&lt;/p&gt;
&lt;h4 id=&#34;101-docker-配置阿里云加速&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#101-docker-配置阿里云加速&#34;&gt;#&lt;/a&gt; 1.0.1 docker 配置阿里云加速&lt;/h4&gt;
&lt;p&gt;登录阿里云 -&amp;gt; 选择容器镜像服务 -&amp;gt; 选择镜像加速器&lt;/p&gt;
&lt;p&gt;共有 ubuntu，centos，mac，windows 版本&lt;/p&gt;
&lt;p&gt;centos 配置&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-linux&#34;&gt;sudo mkdir -p /etc/docker
sudo tee /etc/docker/daemon.json &amp;lt;&amp;lt;-&#39;EOF&#39;
&amp;#123;
  &amp;quot;registry-mirrors&amp;quot;: [&amp;quot;https://scg3prw2.mirror.aliyuncs.com&amp;quot;]
&amp;#125;
EOF
sudo systemctl daemon-reload
sudo systemctl restart docke2.r
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;20-docker常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20-docker常用命令&#34;&gt;#&lt;/a&gt; 2.0 docker 常用命令&lt;/h3&gt;
&lt;h4 id=&#34;201-帮助启动类命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#201-帮助启动类命令&#34;&gt;#&lt;/a&gt; 2.0.1 帮助启动类命令&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;1. 启动docker ：systemctl start docker
2. 停止docker ：systemctl stop docker
3. 重启docker：systemctl restart docker
4. 查看docker状态：systemctl status docker
5. 开机启动：systemctl enable docker
6. 查看docker概要信息：docker --info
7. 查看docker总体帮助文档：docker --help
8. 查看docker命令帮助文档：docker具体命令 --help
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;202-镜像命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#202-镜像命令&#34;&gt;#&lt;/a&gt; 2.0.2 镜像命令&lt;/h4&gt;
&lt;h5 id=&#34;2021-显示已有镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2021-显示已有镜像&#34;&gt;#&lt;/a&gt; 2.0.2.1 显示已有镜像&lt;/h5&gt;
&lt;p&gt;列出本地主机上面的镜像&lt;/p&gt;
&lt;p&gt;![](/docker images.jpg)&lt;/p&gt;
&lt;p&gt;如图所示：&lt;/p&gt;
&lt;p&gt;REPOSITORY：表示镜像的仓库源&lt;/p&gt;
&lt;p&gt;TAG: 表示镜像的标签（版本号）&lt;/p&gt;
&lt;p&gt;IMAGE ID: 镜像 ID&lt;/p&gt;
&lt;p&gt;CREATED: 镜像创建的时间&lt;/p&gt;
&lt;p&gt;SIZE: 镜像的大小&lt;/p&gt;
&lt;p&gt;同一个仓库源可以有多个 tag（版本号），使用 REPOSITORY:TAG 来定义不同的镜像，如果不指定则默认使用最新版本如 mysql:latest 镜像&lt;/p&gt;
&lt;p&gt;-options 操作说明：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;-a：列出本地的所有镜像 (含历史)&lt;/li&gt;
&lt;li&gt;-q：只显示镜像 ID&lt;/li&gt;
&lt;/ol&gt;
&lt;h5 id=&#34;2022-从仓库查找镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2022-从仓库查找镜像&#34;&gt;#&lt;/a&gt; 2.0.2.2 从仓库查找镜像&lt;/h5&gt;
&lt;p&gt;![](/docker search.jpg)&lt;/p&gt;
&lt;p&gt;NAME：镜像名称&lt;/p&gt;
&lt;p&gt;DESCRIPTION: 镜像说明&lt;/p&gt;
&lt;p&gt;STARTS: 点赞数量&lt;/p&gt;
&lt;p&gt;OFFICIAL: 是否为官方的&lt;/p&gt;
&lt;p&gt;AUTOMATED: 是否是自动构建的&lt;/p&gt;
&lt;p&gt;-option 操作说明：&lt;/p&gt;
&lt;p&gt;–limit ：只列出 N 个镜像，默认 25 个 （docker search --limit 5 redis）&lt;/p&gt;
&lt;h5 id=&#34;2023-下载镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2023-下载镜像&#34;&gt;#&lt;/a&gt; 2.0.2.3 下载镜像&lt;/h5&gt;
&lt;p&gt;![](/docker pull.png)&lt;/p&gt;
&lt;p&gt;下载镜像&lt;/p&gt;
&lt;p&gt;1.docker pull 镜像名字 [:TAG]&lt;/p&gt;
&lt;p&gt;2.docker pull 镜像名字&lt;/p&gt;
&lt;p&gt;(1). 没有 TAG 就是最新版 = docker pull 镜像名字:latest&lt;/p&gt;
&lt;h5 id=&#34;2024-查看docker资源占用情况&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2024-查看docker资源占用情况&#34;&gt;#&lt;/a&gt; 2.0.2.4 查看 docker 资源占用情况&lt;/h5&gt;
&lt;p&gt;docker system df&lt;/p&gt;
&lt;p&gt;![](/docker system df.png)&lt;/p&gt;
&lt;h5 id=&#34;2025-删除镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2025-删除镜像&#34;&gt;#&lt;/a&gt; 2.0.2.5  删除镜像&lt;/h5&gt;
&lt;p&gt;![](/docker rmi.png)&lt;/p&gt;
&lt;p&gt;1.docker rmi -f 镜像 id（删除单个)&lt;/p&gt;
&lt;p&gt;2.docker rmi -f 镜像名 1:tag 镜像名 2:tag (删除多个)&lt;/p&gt;
&lt;p&gt;3.docker rmi -f $(docker images -qa) （删除全部）&lt;/p&gt;
&lt;h5 id=&#34;2026-启动交互式容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2026-启动交互式容器&#34;&gt;#&lt;/a&gt; 2.0.2.6 启动交互式容器&lt;/h5&gt;
&lt;p&gt;docker run（前台命令行）&lt;/p&gt;
&lt;p&gt;–name =“容器的新名字”&lt;/p&gt;
&lt;p&gt;-d：后台运行容器并且返回容器 id，也即启动守护式容器（后台运行）；&lt;/p&gt;
&lt;p&gt;-i：以交互模式运行容器，通常与 - t 同时使用，&lt;/p&gt;
&lt;p&gt;-t：为容器分配一个伪输入终端，通常与 - i 一起使用，也即启动交互式容器（前台有伪终端，等待交互）&lt;/p&gt;
&lt;p&gt;-P：随机端口映射，大写 P&lt;/p&gt;
&lt;p&gt;-p：指定端口映射，小写 p&lt;/p&gt;
&lt;p&gt;![image-20220201150011636](/docker run.png)&lt;/p&gt;
&lt;h5 id=&#34;2027-查看容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2027-查看容器&#34;&gt;#&lt;/a&gt; 2.0.2.7 查看容器&lt;/h5&gt;
&lt;p&gt;docker ps&lt;/p&gt;
&lt;p&gt;-a: 列出所有正在运行的容器&lt;/p&gt;
&lt;p&gt;-l：显示最近创建的容器&lt;/p&gt;
&lt;p&gt;-n: 显示最近 n 个创建的容器&lt;/p&gt;
&lt;p&gt;-q：静默模式，只显示容器编号&lt;/p&gt;
&lt;h5 id=&#34;2028-退出容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2028-退出容器&#34;&gt;#&lt;/a&gt; 2.0.2.8 退出容器&lt;/h5&gt;
&lt;p&gt;（1）.exit： run 进去容器，exit 退出，容器停止&lt;/p&gt;
&lt;p&gt;（2）.ctrl+p+q run 进去容器，ctrl+p+q 退出，容器不停止&lt;img data-src=&#34;&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h5 id=&#34;2029-启动容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#2029-启动容器&#34;&gt;#&lt;/a&gt; 2.0.2.9 启动容器&lt;/h5&gt;
&lt;p&gt;（1）.docker start 容器 ID 或者容器名&lt;/p&gt;
&lt;h5 id=&#34;20210-停止容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20210-停止容器&#34;&gt;#&lt;/a&gt; 2.0.2.10 停止容器&lt;/h5&gt;
&lt;p&gt;（1）.docker stop 容器 ID 或者容器名&lt;/p&gt;
&lt;h5 id=&#34;20211-重启容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20211-重启容器&#34;&gt;#&lt;/a&gt; 2.0.2.11 重启容器&lt;/h5&gt;
&lt;p&gt;（1）.docker restart 容器 ID 或者容器名&lt;/p&gt;
&lt;h5 id=&#34;20212-强制停止容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20212-强制停止容器&#34;&gt;#&lt;/a&gt; 2.0.2.12 强制停止容器&lt;/h5&gt;
&lt;p&gt;（1）.docker kill 容器 ID 或者容器名&lt;/p&gt;
&lt;h5 id=&#34;20213-删除已停止的容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20213-删除已停止的容器&#34;&gt;#&lt;/a&gt; 2.0.2.13 删除已停止的容器&lt;/h5&gt;
&lt;p&gt;（1）.docker rm 容器 ID&lt;/p&gt;
&lt;p&gt;（2）.dockers 删除多个容器&lt;/p&gt;
&lt;p&gt;​        1.docker rm -f (docker ps -a -q)&lt;/p&gt;
&lt;p&gt;​        2.docker ps -a -q |xagrs docker rm&lt;/p&gt;
&lt;h5 id=&#34;20214-查看日志&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20214-查看日志&#34;&gt;#&lt;/a&gt; 2.0.2.14 查看日志&lt;/h5&gt;
&lt;p&gt;docker logs 容器 ID&lt;/p&gt;
&lt;h5 id=&#34;20215-查看容器内运行的进程&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20215-查看容器内运行的进程&#34;&gt;#&lt;/a&gt; 2.0.2.15 查看容器内运行的进程&lt;/h5&gt;
&lt;p&gt;docker top 容器 ID&lt;/p&gt;
&lt;h5 id=&#34;20216-重新进入终端&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20216-重新进入终端&#34;&gt;#&lt;/a&gt; 2.0.2.16 重新进入终端&lt;/h5&gt;
&lt;p&gt;（1）.docker exec -it 容器 ID /bin/bash  (bash)（推荐使用）&lt;/p&gt;
&lt;p&gt;exec 是在容器中打开新的终端，并且可以启动新的进程，用 exit 退出不会导致容器的停止。&lt;/p&gt;
&lt;p&gt;（2）.docker attach 容器 ID&lt;/p&gt;
&lt;p&gt;attach 直接进入容器启动命令的终端，不会启动新的进程，用 exit 退出会导致容器的停止。&lt;/p&gt;
&lt;h5 id=&#34;20217-拷贝文件&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20217-拷贝文件&#34;&gt;#&lt;/a&gt; 2.0.2.17 拷贝文件&lt;/h5&gt;
&lt;p&gt;docker cp 容器 ID: 容器内的路径 目标主机的地址&lt;/p&gt;
&lt;h5 id=&#34;20218-导入和导出容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#20218-导入和导出容器&#34;&gt;#&lt;/a&gt; 2.0.2.18 导入和导出容器&lt;/h5&gt;
&lt;p&gt;导出：docker export 容器 ID &amp;gt; 文件名.tar&lt;/p&gt;
&lt;p&gt;导入：cat 文件名.tar | docker import - 镜像用户 / 镜像名：镜像版本号&lt;/p&gt;
&lt;h3 id=&#34;30-docker-镜像&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#30-docker-镜像&#34;&gt;#&lt;/a&gt; 3.0 docker 镜像&lt;/h3&gt;
&lt;p&gt;1. 是一种轻量级，可执行的独立软件包，它包含运行某个软件所需要的所有内容，我们把应用程序和配置依赖打包好形成一个可以交付的运行环境 (包括代码，运行时需要的库，环境变量和配置文件等)，这个打包好的运行环境就是 image 的镜像文件&lt;/p&gt;
&lt;p&gt;只有通过这个镜像文件才能生成 Docker 容器实例（类似 Java 中 new 出来的一个对象)&lt;/p&gt;
&lt;p&gt;2. 联合文件系统 UnionFS:Union 文件系统（UnionFS）是一种分层，轻量级并且高新能的文件系统，它支持对文件系统的修改作为一次提交来一层层的叠加，同时可以将不同目录挂载到同一个虚拟文件系统下，Union 文件系统是 Docker 镜像的基础。镜像可以通过分层来进行继承，基于基础镜像（没有父镜像），可以制作各种特性：一次同时加载多个文件系统，但从外面看起来，只能看到一个文件系统，联合加载会把各层文件系统叠加起来，这样最终的文件系统会包含所有底层的文件和目录。&lt;/p&gt;
&lt;p&gt;3.docker 镜像分层最大的一个好处就是为了资源共享，方便复制迁移，就是为了复用。&lt;/p&gt;
&lt;p&gt;docker commit 提交容器副本使之成为一个新的镜像&lt;/p&gt;
&lt;p&gt;docker commit -m=“提交的描述信息” -a=“作者” 容器 ID 要创建的目标镜像名：[标签名]&lt;/p&gt;
&lt;h3 id=&#34;40-docker-容器数据卷&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#40-docker-容器数据卷&#34;&gt;#&lt;/a&gt; 4.0 docker 容器数据卷&lt;/h3&gt;
&lt;p&gt;（1）. 是什么？&lt;/p&gt;
&lt;p&gt;1.Docker 挂载主机目录访问如果出现 cannnot open directory .: Permission denied&lt;/p&gt;
&lt;p&gt;解决办法：在挂载目录后多加一个–privileged=true 参数即可&lt;/p&gt;
&lt;p&gt;2. 卷就是目录或者文件，存在于一个或者多个容器中，由 docker 挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System 提供一些用于持续储存或者共享数据的特性。&lt;/p&gt;
&lt;p&gt;卷的设计目的就是数据持久化，完全的独立于容器的生存周期，因此 Docker 不会在容器删除的时候删除其挂载的数据卷&lt;/p&gt;
&lt;p&gt;（2）. 能干什么？&lt;/p&gt;
&lt;p&gt;1. 将运用与运行的环境打包成镜像，run 后形成容器实例运行，但是我们对数据的要求希望是持久化的&lt;/p&gt;
&lt;p&gt;Docker 容器产生的数据，如果不备份，那么当容器实例删除后，容器内的数据自然也就没有了。&lt;/p&gt;
&lt;p&gt;为了能保存数据在 docker 中我们使用卷。&lt;/p&gt;
&lt;p&gt;特点：&lt;/p&gt;
&lt;p&gt;1. 数据卷在容器之间共享或重用数据&lt;/p&gt;
&lt;p&gt;2. 卷中的更改可以直接实时生效&lt;/p&gt;
&lt;p&gt;3. 数据卷中的更改不会包含在镜像的更新中&lt;/p&gt;
&lt;p&gt;4. 数据卷的生命周期一直持续到没有容器使用它为止&lt;/p&gt;
&lt;p&gt;（3）. 案例&lt;/p&gt;
&lt;p&gt;1.docker run -it --privileged=true -v / 宿主机绝对路径目录:/ 容器内目录  镜像名     (如果没有目录 docker 自建)&lt;/p&gt;
&lt;p&gt;2. 查看数据卷是否挂载成功 docker inspect 容器 ID&lt;/p&gt;
&lt;p&gt;3. 容器内的目录可读可写 docker run -it --privileged=true -v / 宿主机绝对路径目录:/ 容器内目录:rw  镜像名&lt;/p&gt;
&lt;p&gt;4. 容器内只能读不能写 docker run -it --privileged=true -v / 宿主机绝对路径目录:/ 容器内目录:ro 镜像名&lt;/p&gt;
&lt;p&gt;（4）. 卷的继承和共享&lt;/p&gt;
&lt;p&gt;1.docker run  -it --privileged=true --volumes-from 父类 --name u2 ubuntu&lt;/p&gt;
&lt;h3 id=&#34;50-docker-常规软件的安装&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#50-docker-常规软件的安装&#34;&gt;#&lt;/a&gt; 5.0 docker 常规软件的安装&lt;/h3&gt;
&lt;h4 id=&#34;501步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#501步骤&#34;&gt;#&lt;/a&gt; 5.0.1. 步骤&lt;/h4&gt;
&lt;p&gt;（1）. 搜索镜像&lt;/p&gt;
&lt;p&gt;（2）. 拉取镜像&lt;/p&gt;
&lt;p&gt;（3）. 查看镜像&lt;/p&gt;
&lt;p&gt;（4）. 启动镜像&lt;/p&gt;
&lt;p&gt;（5）. 停止容器&lt;/p&gt;
&lt;p&gt;（6）. 移除容器&lt;/p&gt;
&lt;h4 id=&#34;502安装tomcat&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#502安装tomcat&#34;&gt;#&lt;/a&gt; 5.0.2. 安装 tomcat&lt;/h4&gt;
&lt;p&gt;（1）.docker search tomcat&lt;/p&gt;
&lt;p&gt;（2）.docker pull tomcat&lt;/p&gt;
&lt;p&gt;（3）.docker images&lt;/p&gt;
&lt;p&gt;（4）.docker run -itd -p 8080:8080 --name=t1  tomcat&lt;/p&gt;
&lt;p&gt;（5）. 访问报 404 (1. 没有关闭防火墙，2. 进入 tomcat docker exec -it 容器 ID/bin/bash ，然后 rm -r webapps , 最后 mv webapps.dist webapps）&lt;/p&gt;
&lt;p&gt;（6）.docker stop 容器 ID&lt;/p&gt;
&lt;p&gt;（7）.docker rmi 镜像 ID&lt;/p&gt;
&lt;h4 id=&#34;503安装mysql&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#503安装mysql&#34;&gt;#&lt;/a&gt; 5.0.3. 安装 mysql&lt;/h4&gt;
&lt;p&gt;（1）.docker search mysql&lt;/p&gt;
&lt;p&gt;（2）.docker pull mysql:5…7&lt;/p&gt;
&lt;p&gt;（3）.docker images&lt;/p&gt;
&lt;p&gt;（4）. docker run -itd -e MYSQL_ROOT_PASSWORD=123456 -p 3306:3306 --name=mysql1  mysql:5.7&lt;/p&gt;
&lt;p&gt;（5）. docker exec -it 容器 ID /bin/bash&lt;/p&gt;
&lt;p&gt;（6）.docker stop 容器 ID&lt;/p&gt;
&lt;p&gt;（7）.docker rmi 镜像 ID&lt;/p&gt;
&lt;p&gt;配置 utf8&lt;/p&gt;
&lt;p&gt;（8）.docker run -d -p 3306:3306 --privileged=true -v  /cgcuse/mysql/log:/var/log/mysql -v /cgcuse/mysql/data:/var/lib/mysql -v     /cgcuse/mysql/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=123456  --name=mysql mysql:5.7&lt;/p&gt;
&lt;p&gt;（9）.cd/cgcuse/mysql/conf  然后 vim my.conf&lt;/p&gt;
&lt;p&gt;最后 ：&lt;/p&gt;
&lt;p&gt;[client]&lt;br&gt;
default_character_set=utf8&lt;br&gt;
[mysqld]&lt;br&gt;
collation_server=utf8_general_ci&lt;br&gt;
character_set_server=utf8&lt;/p&gt;
&lt;h4 id=&#34;504安装redis&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#504安装redis&#34;&gt;#&lt;/a&gt; 5.0.4 安装 redis&lt;/h4&gt;
&lt;p&gt;（1）.docker search redis&lt;/p&gt;
&lt;p&gt;（2）.docker pull mysql:5…7&lt;/p&gt;
&lt;p&gt;（3）.docker images&lt;/p&gt;
&lt;p&gt;（4）.docker run -itd -p 6379:6379 --name=redistest redis:6.0.8&lt;/p&gt;
&lt;p&gt;（5）.docker exec -it 容器 ID /bin/bash&lt;/p&gt;
&lt;p&gt;（6）.redis-cli&lt;/p&gt;
&lt;p&gt;（7）.docker stop 容器 ID&lt;/p&gt;
&lt;p&gt;（8）.docker rmi 镜像 ID&lt;/p&gt;
&lt;h3 id=&#34;60-mysql主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#60-mysql主从复制&#34;&gt;#&lt;/a&gt; 6.0 mysql 主从复制&lt;/h3&gt;
&lt;h4 id=&#34;601新建主服务器容器实例3307&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#601新建主服务器容器实例3307&#34;&gt;#&lt;/a&gt; 6.0.1. 新建主服务器容器实例 3307&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 3307:3306 --privileged=true -v  /cgcuse/mysql-master/log:/var/log/mysql -v /cgcuse/mysql-master/data:/var/lib/mysql -v  /cgcuse/mysql-master/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root  --name=mysql-master mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;602进入-cgcusemysql-masterconf-目录下新建mycnf-vim-mycnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#602进入-cgcusemysql-masterconf-目录下新建mycnf-vim-mycnf&#34;&gt;#&lt;/a&gt; 6.0.2. 进入 /cgcuse/mysql-master/conf 目录下新建 my.cnf       vim my.cnf&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=101 
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql  
## 开启二进制日志功能
log-bin=mall-mysql-bin  
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M  
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed  
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;603修改完配置后重启master实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#603修改完配置后重启master实例&#34;&gt;#&lt;/a&gt; 6.0.3. 修改完配置后重启 master 实例&lt;/h4&gt;
&lt;p&gt;docker restart mysql-master&lt;/p&gt;
&lt;h4 id=&#34;604进入容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#604进入容器&#34;&gt;#&lt;/a&gt; 6.0.4. 进入容器&lt;/h4&gt;
&lt;p&gt;docker exec -it 容器 ID /bin/bash&lt;/p&gt;
&lt;p&gt;mysql -uroot -proot&lt;/p&gt;
&lt;h4 id=&#34;605master容器实例内创建数据同步用户&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#605master容器实例内创建数据同步用户&#34;&gt;#&lt;/a&gt; 6.0.5.master 容器实例内创建数据同步用户&lt;/h4&gt;
&lt;p&gt;create user ‘slave’@’%’ identified by ‘123456’;&lt;/p&gt;
&lt;p&gt;grant replication slave ,replication client on &lt;em&gt;.&lt;/em&gt; to ‘slave’@’%’；&lt;/p&gt;
&lt;h4 id=&#34;606新建从服务器容器实例3308&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#606新建从服务器容器实例3308&#34;&gt;#&lt;/a&gt; 6.0.6. 新建从服务器容器实例 3308&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;docker run -d -p 3308:3306 --privileged=true -v  /cgcuse/mysql-slave/log:/var/log/mysql -v /cgcuse/mysql-slave/data:/var/lib/mysql -v  /cgcuse/mysql-slave/conf:/etc/mysql/conf.d -e MYSQL_ROOT_PASSWORD=root  --name=mysql-slave mysql:5.7
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;607进入-cgcusemysql-slaveconf-目录下新建mycnf-vim-mycnf&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#607进入-cgcusemysql-slaveconf-目录下新建mycnf-vim-mycnf&#34;&gt;#&lt;/a&gt; 6.0.7. 进入 /cgcuse/mysql-slave/conf 目录下新建 my.cnf       vim my.cnf&lt;/h4&gt;
&lt;pre&gt;&lt;code&gt;[mysqld]
## 设置server_id，同一局域网中需要唯一
server_id=102
## 指定不需要同步的数据库名称
binlog-ignore-db=mysql  
## 开启二进制日志功能，以备Slave作为其它数据库实例的Master时使用
log-bin=mall-mysql-slave1-bin  
## 设置二进制日志使用内存大小（事务）
binlog_cache_size=1M  
## 设置使用的二进制日志格式（mixed,statement,row）
binlog_format=mixed  
## 二进制日志过期清理时间。默认值为0，表示不自动清理。
expire_logs_days=7  
## 跳过主从复制中遇到的所有错误或指定类型的错误，避免slave端复制中断。
## 如：1062错误是指一些主键重复，1032错误是因为主从数据库数据不一致
slave_skip_errors=1062  
## relay_log配置中继日志
relay_log=mall-mysql-relay-bin  
## log_slave_updates表示slave将复制事件写进自己的二进制日志
log_slave_updates=1  
## slave设置为只读（具有super权限的用户除外）
read_only=1
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;608修改完配置后重启slave实例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#608修改完配置后重启slave实例&#34;&gt;#&lt;/a&gt; 6.0.8. 修改完配置后重启 slave 实例&lt;/h4&gt;
&lt;p&gt;docker restart mysql-slave&lt;/p&gt;
&lt;h4 id=&#34;609在主数据库中查看主从同步状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#609在主数据库中查看主从同步状态&#34;&gt;#&lt;/a&gt; 6.0.9. 在主数据库中查看主从同步状态&lt;/h4&gt;
&lt;p&gt;show master status;&lt;/p&gt;
&lt;h4 id=&#34;6010进入mysql-slave容器&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6010进入mysql-slave容器&#34;&gt;#&lt;/a&gt; 6.0.10. 进入 mysql-slave 容器&lt;/h4&gt;
&lt;p&gt;docker exec -it 容器 ID  /bin/bash&lt;/p&gt;
&lt;h4 id=&#34;6011在数据库中配置主从复制&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6011在数据库中配置主从复制&#34;&gt;#&lt;/a&gt; 6.0.11. 在数据库中配置主从复制&lt;/h4&gt;
&lt;p&gt;change master to master_host=‘宿主机 ip’, master_user=‘slave’, master_password=‘123456’, master_port=3307, master_log_file=‘mall-mysql-bin.000001’, master_log_pos=617, master_connect_retry=30;&lt;/p&gt;
&lt;p&gt;master_host：主数据库的 IP 地址；&lt;/p&gt;
&lt;p&gt;master_port：主数据库的运行端口；&lt;/p&gt;
&lt;p&gt;master_user：在主数据库创建的用于同步数据的用户账号；&lt;/p&gt;
&lt;p&gt;master_password：在主数据库创建的用于同步数据的用户密码；&lt;/p&gt;
&lt;p&gt;master_log_file：指定从数据库要复制数据的日志文件，通过查看主数据的状态，获取 File 参数；&lt;/p&gt;
&lt;p&gt;master_log_pos：指定从数据库从哪个位置开始复制数据，通过查看主数据的状态，获取 Position 参数；&lt;/p&gt;
&lt;p&gt;master_connect_retry：连接失败重试的时间间隔，单位为秒。&lt;/p&gt;
&lt;h4 id=&#34;6012在从数据库中查看主从同步状态&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6012在从数据库中查看主从同步状态&#34;&gt;#&lt;/a&gt; 6.0.12. 在从数据库中查看主从同步状态&lt;/h4&gt;
&lt;p&gt;show slave status \G;&lt;/p&gt;
&lt;h4 id=&#34;6013在从数据库中开启主从同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6013在从数据库中开启主从同步&#34;&gt;#&lt;/a&gt; 6.0.13. 在从数据库中开启主从同步&lt;/h4&gt;
&lt;p&gt;start slave;&lt;/p&gt;
&lt;h4 id=&#34;6014查看从数据库状态发现已经同步&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6014查看从数据库状态发现已经同步&#34;&gt;#&lt;/a&gt; 6.0.14. 查看从数据库状态发现已经同步&lt;/h4&gt;
&lt;p&gt;show slave status \G;&lt;/p&gt;
&lt;h4 id=&#34;6015主从复制测试&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#6015主从复制测试&#34;&gt;#&lt;/a&gt; 6.0.15. 主从复制测试&lt;/h4&gt;
&lt;p&gt;navicate 连接主库添加，从库查看或者命令添加；&lt;/p&gt;
&lt;h3 id=&#34;70分布式存储&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#70分布式存储&#34;&gt;#&lt;/a&gt; 7.0. 分布式存储&lt;/h3&gt;
&lt;h4 id=&#34;701哈希取余算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#701哈希取余算法&#34;&gt;#&lt;/a&gt; 7.0.1. 哈希取余算法&lt;/h4&gt;
&lt;p&gt;2 亿条记录就是 2 亿个 k，v，我们单机不行必须要分布式多机，假设有 3 台机器构成一个集群，用户每次读写操作都是根据公式；&lt;/p&gt;
&lt;p&gt;hash (key)% N 个机器台数，计算出哈希值，用来决定数据映射到哪一个结点上；&lt;/p&gt;
&lt;p&gt;优点：简单粗暴，直接有效，只需要预估好数据规划好节点，列如 3 台，8 台，10 台，就能保证一段时间的数据支撑，使用 Hash 算法让固定的一部分请求落到同一台服务器上，这样每台服务器固定处理一部分请求（并且维护这些请求信息）, 起到负载均衡 + 分而治之的作用；&lt;/p&gt;
&lt;p&gt;缺点：原来规划好的节点，进行扩容或者缩容就比较麻烦了额，不管扩缩，每次数据变动导致节点有变动，映射关系需要重新进行计算，在服务器个数固定不变时没有问题，如果需要弹性扩容或故障停机的情况下，原来的取模公式就会发生变化：Hash (key)/3 会变成 Hash (key) /?。此时地址经过取余运算的结果将发生很大变化，根据公式获取的服务器也会变得不可控。&lt;/p&gt;
&lt;p&gt;某个 redis 机器宕机了，由于台数数量变化，会导致 hash 取余全部数据重新洗牌。&lt;/p&gt;
&lt;h4 id=&#34;702一致性哈希算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#702一致性哈希算法&#34;&gt;#&lt;/a&gt; 7.0.2. 一致性哈希算法&lt;/h4&gt;
&lt;p&gt;1. 目标是为了解决分布式缓存数据变动和映射问题，某个机器宕机了，分母数量改变了，自然取余数不 OK 了。&lt;/p&gt;
&lt;p&gt;步骤:&lt;/p&gt;
&lt;p&gt;(1). 算法构建一致性哈希环：&lt;/p&gt;
&lt;p&gt;​     一致性哈希算法必然有个 hash 函数并按照算法产生 hash 值，这个算法的所有可能哈希值会构成一个全量集，这个集合可以成为一个 hash 空间 [0,2^32-1]，这个是一个线性空间，但是在算法中，我们通过适当的逻辑控制将它首尾相连 (0 = 2^32), 这样让它逻辑上形成了一个环形空间。&lt;/p&gt;
&lt;p&gt;​       它也是按照使用取模的方法，前面笔记介绍的节点取模法是对节点（服务器）的数量进行取模。而一致性 Hash 算法是对 2&lt;sup&gt;32 取模，简单来说，一致性 Hash 算法将整个哈希值空间组织成一个虚拟的圆环，如假设某哈希函数 H 的值空间为 0-2&lt;/sup&gt;32-1（即哈希值是一个 32 位无符号整形），整个哈希环如下图：整个空间按顺时针方向组织，圆环的正上方的点代表 0，0 点右侧的第一个点代表 1，以此类推，2、3、4、…… 直到 2&lt;sup&gt;32-1，也就是说 0 点左侧的第一个点代表 2&lt;/sup&gt;32-1， 0 和 2&lt;sup&gt;32-1 在零点中方向重合，我们把这个由 2&lt;/sup&gt;32 个点组成的圆环称为 Hash 环。&lt;/p&gt;
&lt;p&gt;(2). 服务器 IP 节点映射&lt;/p&gt;
&lt;p&gt;​       将集群中各个 IP 节点映射到环上的某一个位置。  将各个服务器使用 Hash 进行一个哈希，具体可以选择服务器的 IP 或主机名作为关键字进行哈希，这样每台机器就能确定其在哈希环上的位置。假如 4 个节点 NodeA、B、C、D，经过 IP 地址的哈希函数计算 (hash (ip))，使用 IP 地址哈希后在环空间的位置如下：&lt;/p&gt;
&lt;p&gt;(3).key 落到服务器的落建规则&lt;/p&gt;
&lt;p&gt;​       当我们需要存储一个 kv 键值对时，首先计算 key 的 hash 值，hash (key)，将这个 key 使用相同的函数 Hash 计算出哈希值并确定此数据在环上的位置，&lt;strong&gt;从此位置沿环顺时针 “行走”&lt;/strong&gt;，第一台遇到的服务器就是其应该定位到的服务器，并将该键值对存储在该节点上。&lt;/p&gt;
&lt;p&gt;​       如我们有 Object A、Object B、Object C、Object D 四个数据对象，经过哈希计算后，在环空间上的位置如下：根据一致性 Hash 算法，数据 A 会被定为到 Node A 上，B 被定为到 Node B 上，C 被定为到 Node C 上，D 被定为到 Node D 上。&lt;/p&gt;
&lt;p&gt;优点：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;容错性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;假设 Node C 宕机，可以看到此时对象 A、B、D 不会受到影响，只有 C 对象被重定位到 Node D。一般的，在一致性 Hash 算法中，如果一台服务器不可用，则受影响的数据仅仅是此服务器到其环空间中前一台服务器（即沿着逆时针方向行走遇到的第一台服务器）之间数据，其它不会受到影响。简单说，就是 C 挂了，受到影响的只是 B、C 之间的数据，并且这些数据会转移到 D 进行存储。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;扩展性&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;数据量增加了，需要增加一台节点 NodeX，X 的位置在 A 和 B 之间，那收到影响的也就是 A 到 X 之间的数据，重新把 A 到 X 的数据录入到 X 上即可，&lt;/p&gt;
&lt;p&gt;不会导致 hash 取余全部数据重新洗牌。&lt;/p&gt;
&lt;p&gt;缺点：&lt;/p&gt;
&lt;p&gt;Hash 环的数据倾斜问题&lt;/p&gt;
&lt;p&gt;一致性 Hash 算法在服务&lt;strong&gt;节点太少时&lt;/strong&gt;，容易因为节点分布不均匀而造成&lt;strong&gt;数据倾斜&lt;/strong&gt;（被缓存的对象大部分集中缓存在某一台服务器上）问题，&lt;/p&gt;
&lt;p&gt;为了在节点数目发生改变时尽可能少的迁移数据&lt;/p&gt;
&lt;p&gt;将所有的存储节点排列在收尾相接的 Hash 环上，每个 key 在计算 Hash 后会顺时针找到临近的存储节点存放。&lt;/p&gt;
&lt;p&gt;而当有节点加入或退出时仅影响该节点在 Hash 环上顺时针相邻的后续节点。&lt;/p&gt;
&lt;p&gt;优点&lt;/p&gt;
&lt;p&gt;加入和删除节点只影响哈希环中顺时针方向的相邻的节点，对其他节点无影响。&lt;/p&gt;
&lt;p&gt;缺点&lt;/p&gt;
&lt;p&gt;数据的分布和节点的位置有关，因为这些节点不是均匀的分布在哈希环上的，所以数据在进行存储时达不到均匀分布的效果。&lt;/p&gt;
&lt;h4 id=&#34;703哈希槽算法&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#703哈希槽算法&#34;&gt;#&lt;/a&gt; 7.0.3. 哈希槽算法&lt;/h4&gt;
&lt;p&gt;1. 是什么？&lt;/p&gt;
&lt;p&gt;哈希槽实质就是一个数组，数组 [0,2^14 -1] 形成 hash slot 空间。&lt;/p&gt;
&lt;p&gt;2. 可以干什么？&lt;/p&gt;
&lt;p&gt;解决均匀分配的问题，在数据和节点之间又加入了一层，把这层称为哈希槽（slot），用于管理数据和节点之间的关系，现在就相当于节点上放的是槽，槽里放的是数据。&lt;/p&gt;
&lt;p&gt;槽解决的是粒度问题，相当于把粒度变大了，这样便于数据移动。&lt;/p&gt;
&lt;p&gt;哈希解决的是映射问题，使用 key 的哈希值来计算所在的槽，便于数据分配。&lt;/p&gt;
&lt;p&gt;3. 多少个 hash 槽？&lt;/p&gt;
&lt;p&gt;一个集群只能有 16384 个槽，编号 0-16383（0-2^14-1）。这些槽会分配给集群中的所有主节点，分配策略没有要求。可以指定哪些编号的槽分配给哪个主节点。集群会记录节点和槽的对应关系。解决了节点和槽的关系后，接下来就需要对 key 求哈希值，然后对 16384 取余，余数是几 key 就落入对应的槽里。slot = CRC16 (key) % 16384。以槽为单位移动数据，因为槽的数目是固定的，处理起来比较容易，这样数据移动问题就解决了。&lt;/p&gt;
&lt;p&gt;4. 计算&lt;/p&gt;
&lt;p&gt;Redis 集群中内置了 16384 个哈希槽，redis 会根据节点数量大致均等的将哈希槽映射到不同的节点。当需要在 Redis 集群中放置一个 key-value 时，redis 先对 key 使用 crc16 算法算出一个结果，然后把结果对 16384 求余数，这样每个 key 都会对应一个编号在 0-16383 之间的哈希槽，也就是映射到某个节点上。如下代码，key 之 A 、B 在 Node2， key 之 C 落在 Node3 上&lt;/p&gt;
&lt;h3 id=&#34;80-redis-3主3从集群&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#80-redis-3主3从集群&#34;&gt;#&lt;/a&gt; 8.0 Redis 3 主 3 从集群&lt;/h3&gt;
&lt;h4 id=&#34;801-3主3从redis集群配置&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#801-3主3从redis集群配置&#34;&gt;#&lt;/a&gt; 8.0.1 3 主 3 从 redis 集群配置&lt;/h4&gt;
&lt;p&gt;1. 关闭防火墙 + 启动 docker 后台服务、&lt;/p&gt;
&lt;p&gt;（1）. systemctl start docker&lt;/p&gt;
&lt;p&gt;2. 新建 6 个 docker 容器实例&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;docker run -d --name redis-node-1 --net host --privileged=true -v /data/redis/share/redis-node-1:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6381

docker run -d --name redis-node-2 --net host --privileged=true -v /data/redis/share/redis-node-2:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6382

docker run -d --name redis-node-3 --net host --privileged=true -v /data/redis/share/redis-node-3:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6383

docker run -d --name redis-node-4 --net host --privileged=true -v /data/redis/share/redis-node-4:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6384

docker run -d --name redis-node-5 --net host --privileged=true -v /data/redis/share/redis-node-5:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6385

docker run -d --name redis-node-6 --net host --privileged=true -v /data/redis/share/redis-node-6:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6386
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;/redis.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;3. 进入容器 redis-node-1 并为 6 台机器构建集群关系&lt;/p&gt;
&lt;p&gt;（1）. 进入容器 docker exec -it 容器 ID  /bin/bash&lt;/p&gt;
&lt;p&gt;（2）. 构建主从关系&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;redis-cli --cluster create 1.15.175.46:6381 1.15.175.46:6382 1.15.175.46:6383 1.15.175.46:6384 1.15.175.46:6385 1.15.175.46:6386 --cluster-replicas 1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;出现以下结果就成功了。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;/redis-hash.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;4. 查看集群状态&lt;/p&gt;
&lt;p&gt;（1）.redis-cli -p 6381&lt;/p&gt;
&lt;p&gt;（2）.cluster info&lt;/p&gt;
&lt;p&gt;（3）.cluster nodes&lt;/p&gt;
&lt;h4 id=&#34;802-3从容错切换迁移案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#802-3从容错切换迁移案例&#34;&gt;#&lt;/a&gt; 8.0.2 3 从容错切换迁移案例&lt;/h4&gt;
&lt;p&gt;1. 数据读写存储&lt;/p&gt;
&lt;p&gt;（1）. 启动 6 机构成的集群并且使用 exec 进入&lt;/p&gt;
&lt;p&gt;（2）. 对 6381 新增两个 key&lt;/p&gt;
&lt;p&gt;（3）. 防止路由失效加参数 - c 并新增两个 key&lt;/p&gt;
&lt;p&gt;redis-cli -p 6381 -c&lt;/p&gt;
&lt;p&gt;（4）. 查看集群信息&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 1.15.175.46:6381&lt;/p&gt;
&lt;p&gt;2. 容错切换迁移&lt;/p&gt;
&lt;p&gt;（1）. 主 6381 和从机切换，先停止主机 6381&lt;/p&gt;
&lt;p&gt;1.6381 主机停了，对应的真实从机上位&lt;/p&gt;
&lt;p&gt;2.6381 作为 1 号主机分配的从机以实际情况为准，具体是几号机器就是几号&lt;/p&gt;
&lt;p&gt;docker stop redis-node-1&lt;/p&gt;
&lt;p&gt;（2）. 再次查看集群信息&lt;/p&gt;
&lt;p&gt;docker exec -it redis-node-2 bash&lt;/p&gt;
&lt;p&gt;redis-cli -p 6382 -c&lt;/p&gt;
&lt;p&gt;cluster nodes&lt;/p&gt;
&lt;p&gt;（3）. 先还原之前的 3 主 3 从&lt;/p&gt;
&lt;p&gt;docker start redis-node-1&lt;/p&gt;
&lt;p&gt;docker stop redis-node-5&lt;/p&gt;
&lt;p&gt;docker start redis-node-5&lt;/p&gt;
&lt;p&gt;（4）. 查看集群状态&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 1.15.175.46:6381&lt;/p&gt;
&lt;h4 id=&#34;803-3从扩容案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#803-3从扩容案例&#34;&gt;#&lt;/a&gt; 8.0.3 3 从扩容案例&lt;/h4&gt;
&lt;p&gt;1. 新建 6387，6388 两个节点 + 新建后启动 + 查看是否 8 节点&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;docker run -d --name redis-node-7 --net host --privileged=true -v /data/redis/share/redis-node-7:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6387&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;docker run -d --name redis-node-8 --net host --privileged=true -v /data/redis/share/redis-node-8:/data redis:6.0.8 --cluster-enabled yes --appendonly yes --port 6388&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;docker ps&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;2. 进入 6387 容器实例内部&lt;/p&gt;
&lt;p&gt;docker exec -it redis-node-7 bash&lt;/p&gt;
&lt;p&gt;3. 将新增的 6387 节点（空槽号）作为节点加入原集群&lt;/p&gt;
&lt;p&gt;redis-cli --cluster add-node 1.15.175.46:6387 1.15.175.46:6381&lt;/p&gt;
&lt;p&gt;4. 检查集群情况第一次&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6381&lt;/p&gt;
&lt;p&gt;5. 重新分派槽号&lt;/p&gt;
&lt;p&gt;命令:redis-cli --cluster &lt;strong&gt;reshard&lt;/strong&gt; IP 地址：端口号&lt;/p&gt;
&lt;p&gt;redis-cli --cluster reshard  1.15.175.46:6381&lt;/p&gt;
&lt;p&gt;6. 检查集群情况第二次&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6381&lt;/p&gt;
&lt;p&gt;7. 为主节点 6387 分配从节点 6388&lt;/p&gt;
&lt;p&gt;命令：redis-cli --cluster add-node ip: 新 slave 端口 ip: 新 master 端口 --cluster-slave --cluster-master-id 新主机节点 ID&lt;/p&gt;
&lt;p&gt;redis-cli --cluster add-node  1.15.175.46:6388  1.15.175.46:6387 --cluster-slave --cluster-master-id e4781f644d4a4e4d4b4d107157b9ba8144631451------- 这个是 6387 的编号，按照自己实际情况&lt;/p&gt;
&lt;p&gt;8. 检查集群情况第三次&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6388&lt;/p&gt;
&lt;h4 id=&#34;804-3从缩容案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#804-3从缩容案例&#34;&gt;#&lt;/a&gt; 8.0.4 3 从缩容案例&lt;/h4&gt;
&lt;p&gt;1. 下线 6387，6388 两个节点&lt;/p&gt;
&lt;p&gt;2. 检查集群情况 1 获得 6388 的节点 ID&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6388&lt;/p&gt;
&lt;p&gt;3. 将 6388 删除，从集群中将 4 号从节点 6388 删除&lt;/p&gt;
&lt;p&gt;命令：redis-cli --cluster del-node ip: 从机端口 从机 6388 节点 ID&lt;/p&gt;
&lt;p&gt;redis-cli --cluster del-node 1.15.175.46:6388 5d149074b7e57b802287d1797a874ed7a1a284a8&lt;/p&gt;
&lt;p&gt;4. 将 6387 的槽号清空重新分配本例将清出来的槽号都给 6381&lt;/p&gt;
&lt;p&gt;redis-cli --cluster reshard 1.15.175.46:6381&lt;/p&gt;
&lt;p&gt;5. 检查集群情况第二次&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6381&lt;/p&gt;
&lt;p&gt;6. 将 6387 删除&lt;/p&gt;
&lt;p&gt;redis-cli --cluster del-node 1.15.175.46:6387 5d149074b7e57b802287d1797a874ed7a1a284a8&lt;/p&gt;
&lt;p&gt;7. 检查集群情况第三次&lt;/p&gt;
&lt;p&gt;redis-cli --cluster check 真实 ip 地址：6381&lt;/p&gt;
&lt;h3 id=&#34;90-dockerfile&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#90-dockerfile&#34;&gt;#&lt;/a&gt; 9.0 DockerFile&lt;/h3&gt;
&lt;h4 id=&#34;901dockerfile构建过程解析&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#901dockerfile构建过程解析&#34;&gt;#&lt;/a&gt; 9.0.1dockerfile 构建过程解析&lt;/h4&gt;
&lt;p&gt;1.Dockerfile 是用来构建 Docker 镜像的文本文件，是由一条条构建镜像所需的指令和参数构成的脚本。&lt;/p&gt;
&lt;p&gt;2. 构建过程&lt;/p&gt;
&lt;p&gt;（1）. 编写 Dockerfile 文件&lt;/p&gt;
&lt;p&gt;（2）.docker build 命令构建镜像&lt;/p&gt;
&lt;p&gt;（3）.docker run 运行镜像容器&lt;/p&gt;
&lt;p&gt;3.Dockerfile 内容基础知识&lt;/p&gt;
&lt;p&gt;（1）. 每条保留字指令都必须为大写字母且后面要跟随至少一个参数&lt;/p&gt;
&lt;p&gt;（2）. 指令按照从上到下，顺序执行&lt;/p&gt;
&lt;p&gt;（3）.# 表示注释&lt;/p&gt;
&lt;p&gt;（4）. 每条指令都会创建一个新的镜像层并对镜像进行提交&lt;/p&gt;
&lt;p&gt;4.Docker 执行 Dockerfile 的大致流程&lt;/p&gt;
&lt;p&gt;（1）.docker 从基础镜像运行一个容器&lt;/p&gt;
&lt;p&gt;（2）. 执行一条指令并对容器做出修改&lt;/p&gt;
&lt;p&gt;（3）. 执行类似 docker commit 的操作提交一个新的镜像层&lt;/p&gt;
&lt;p&gt;（4）.docker 再基于刚提交的镜像运行一个新的容器&lt;/p&gt;
&lt;p&gt;（5）. 执行 dockerfile 中的下一条指令直到所有指令都执行完成&lt;/p&gt;
&lt;h4 id=&#34;902-dockerfile常用保留字指令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#902-dockerfile常用保留字指令&#34;&gt;#&lt;/a&gt; 9.0.2 DockerFile 常用保留字指令&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;FROM&lt;/strong&gt; : 基础镜像当前新镜像是基于哪个镜像的，指定一个已经存在的镜像作为模板，第一条必须是 from&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;MAINTAINER&lt;/strong&gt; : 镜像维护者的姓名和邮箱地址&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;RUN&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;1. 容器构建的时候需要运行的命令&lt;/p&gt;
&lt;p&gt;2. 两种格式：1.shell 格式，exec 格式&lt;/p&gt;
&lt;p&gt;3.RUN 是在 docker build 时运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;EXPOSE&lt;/strong&gt;: 当前容器对外暴露出的端口&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;WORKDIR&lt;/strong&gt; : 指定在创建容器后，终端默认登录的进来的工作目录，一个落脚点&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;USER&lt;/strong&gt; : 指定该镜像以什么样的用户去执行，如果都不指定，默认是 root&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ENV&lt;/strong&gt; : 用来在构建镜像过程中设置环境变量&lt;/p&gt;
&lt;p&gt;ENV key value&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ADD&lt;/strong&gt; : 将宿主机目录下的文件拷贝进镜像且会自动处理 URL 和解压 tar 压缩包&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;COPY&lt;/strong&gt; : 类似 ADD ，拷贝文件和目录到镜像中。&lt;/p&gt;
&lt;p&gt;将从构建上下文目录中 &amp;lt;源路径&amp;gt; 的文件 / 目录复制到新的一层的镜像内的 &amp;lt; 目标路径 &amp;gt; 位置&lt;/p&gt;
&lt;p&gt;（1）.COPY src  dest&lt;/p&gt;
&lt;p&gt;（2）.COPY[“src”,“dest”]&lt;/p&gt;
&lt;p&gt;（3）.&amp;lt;src 源路径&amp;gt;: 源文件或者源目录&lt;/p&gt;
&lt;p&gt;（4）.&amp;lt;dest 目标路径&amp;gt;: 容器内的指定路径，该路径不用事先创建好，如果路径不存在，会自动创建&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;VOLUME&lt;/strong&gt;: 容器数据卷，用于数据保存和持久化工作&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;CMD&lt;/strong&gt;: 指定容器启动后要干的事情（指令跟 RUN 相似）可以有多个 CMD 指令，但只有最后一个生效，CMD 会被 docker run 之后的参数替换&lt;/p&gt;
&lt;p&gt;1.RUN 是在 docker build 时运行&lt;/p&gt;
&lt;p&gt;2.CMD 是在 docker run 时运行&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ENTRYPOINT&lt;/strong&gt;: 指定一个容器启动时要运行的命令，类似 CMD 但是不会被 docker run 之后的参数替换。&lt;/p&gt;
&lt;h4 id=&#34;903案例&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#903案例&#34;&gt;#&lt;/a&gt; 9.0.3 案例&lt;/h4&gt;
&lt;p&gt;自定义镜像 mycentosjava8（具备 jdk8，ifconfig，vim）&lt;/p&gt;
&lt;p&gt;下载 jdk 文件到 myfile 下&lt;/p&gt;
&lt;p&gt;vim Dockerfile&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;FROM centos
MAINTAINER haha&amp;lt;haha@136.com&amp;gt;
 
ENV MYPATH /usr/local
WORKDIR $MYPATH
 
#安装vim编辑器
RUN yum -y install vim
#安装ifconfig命令查看网络IP
RUN yum -y install net-tools
#安装java8及lib库
RUN yum -y install glibc.i686
RUN mkdir /usr/local/java
#ADD 是相对路径jar,把jdk-8u171-linux-x64.tar.gz添加到容器中,安装包必须要和Dockerfile文件在同一位置
ADD jdk-8u171-linux-x64.tar.gz /usr/local/java/
#配置java环境变量
ENV JAVA_HOME /usr/local/java/jdk1.8.0_171
ENV JRE_HOME $JAVA_HOME/jre
ENV CLASSPATH $JAVA_HOME/lib/dt.jar:$JAVA_HOME/lib/tools.jar:$JRE_HOME/lib:$CLASSPATH
ENV PATH $JAVA_HOME/bin:$PATH
 
EXPOSE 80
 
CMD echo $MYPATH
CMD echo &amp;quot;success--------------ok&amp;quot;
CMD /bin/bash
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;构建&lt;/p&gt;
&lt;p&gt;docker build -t 新镜像名字:tag .&lt;/p&gt;
&lt;p&gt;docker image prune 删除虚悬镜像&lt;/p&gt;
&lt;h4 id=&#34;904-微服务实战&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#904-微服务实战&#34;&gt;#&lt;/a&gt; 9.0.4 微服务实战&lt;/h4&gt;
&lt;p&gt;1. 新建一个 springboot 微服务项目&lt;/p&gt;
&lt;p&gt;2. 搞定微服务 jar 包&lt;/p&gt;
&lt;p&gt;3.jar 包和 Dockerfile 放在同一个路径下&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 基础镜像使用java

FROM java:8

# 作者

MAINTAINER zzyy

# VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp

VOLUME /tmp

# 将jar包添加到容器中并更名为zzyy_docker.jar

ADD docker_boot-0.0.1-SNAPSHOT.jar zzyy_docker.jar

# 运行jar包

RUN bash -c &#39;touch /zzyy_docker.jar&#39;

ENTRYPOINT [&amp;quot;java&amp;quot;,&amp;quot;-jar&amp;quot;,&amp;quot;/zzyy_docker.jar&amp;quot;]

#暴露6001端口作为微服务

EXPOSE 6001
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;4.docker build -t cgc_docker:1.6&lt;/p&gt;
&lt;p&gt;5. 运行容器&lt;/p&gt;
&lt;p&gt;docker run -itd  -p 6001:6001 容器 ID&lt;/p&gt;
&lt;p&gt;6. 测试&lt;/p&gt;
&lt;h3 id=&#34;100-docker网络&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#100-docker网络&#34;&gt;#&lt;/a&gt; 10.0 Docker 网络&lt;/h3&gt;
&lt;h4 id=&#34;1001常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1001常用命令&#34;&gt;#&lt;/a&gt; 10.0.1 常用命令&lt;/h4&gt;
&lt;p&gt;1. 查看 docker 网络模式命令&lt;/p&gt;
&lt;p&gt;docker network ls&lt;/p&gt;
&lt;p&gt;2. 查看所有命令&lt;/p&gt;
&lt;p&gt;docker network --help&lt;/p&gt;
&lt;p&gt;3. 查看网络源数据&lt;/p&gt;
&lt;p&gt;docker network inspect xxx 网络名字&lt;/p&gt;
&lt;p&gt;4. 删除网络&lt;/p&gt;
&lt;p&gt;docker network rm xxx 网络名字&lt;/p&gt;
&lt;p&gt;5. 创建网络&lt;/p&gt;
&lt;p&gt;docker network create 网络名字&lt;/p&gt;
&lt;h4 id=&#34;1002-作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1002-作用&#34;&gt;#&lt;/a&gt; 10.0.2 作用&lt;/h4&gt;
&lt;p&gt;1. 容器的互联和通信以及端口映射&lt;/p&gt;
&lt;p&gt;2. 容器 IP 变动的时候可以通过服务名直接网络通信而不受到影像&lt;/p&gt;
&lt;h4 id=&#34;1003-网络模式&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1003-网络模式&#34;&gt;#&lt;/a&gt; 10.0.3 网络模式&lt;/h4&gt;
&lt;p&gt;1.bridge 模式：使用–network bridge 指定，默认使用 docker0&lt;/p&gt;
&lt;p&gt;2.host 模式：使用–network host 指定&lt;/p&gt;
&lt;p&gt;3.none 模式：使用–network none 指定&lt;/p&gt;
&lt;p&gt;4.container 模式：使用–network container:NAME 或者容器 ID 指定&lt;/p&gt;
&lt;p&gt;docker 容器内部 ip 时有可能会发生改变的&lt;/p&gt;
&lt;h5 id=&#34;10031-bridge&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10031-bridge&#34;&gt;#&lt;/a&gt; 10.0.3.1 bridge&lt;/h5&gt;
&lt;p&gt;Docker 服务默认会创建一个 docker0 网桥（其上有一个 docker0 内部接口），该桥接网络的名称为 docker0，它在内核层连通了其他的物理或虚拟网卡，这就将所有容器和本地主机都放到同一个物理网络。Docker 默认指定了 docker0 接口 的 IP 地址和子网掩码，让主机和容器之间可以通过网桥相互通信。&lt;/p&gt;
&lt;p&gt;# 查看 bridge 网络的详细信息，并通过 grep 获取名称项&lt;/p&gt;
&lt;p&gt;docker network inspect bridge | grep name&lt;/p&gt;
&lt;p&gt;1 Docker 使用 Linux 桥接，在宿主机虚拟一个 Docker 容器网桥 (docker0)，Docker 启动一个容器时会根据 Docker 网桥的网段分配给容器一个 IP 地址，称为 Container-IP，同时 Docker 网桥是每个容器的默认网关。因为在同一宿主机内的容器都接入同一个网桥，这样容器之间就能够通过容器的 Container-IP 直接通信。&lt;/p&gt;
&lt;p&gt;2 docker run 的时候，没有指定 network 的话默认使用的网桥模式就是 bridge，使用的就是 docker0。在宿主机 ifconfig, 就可以看到 docker0 和自己 create 的 network (后面讲) eth0，eth1，eth2…… 代表网卡一，网卡二，网卡三……，lo 代表 127.0.0.1，即 localhost，inet addr 用来表示网卡的 IP 地址&lt;/p&gt;
&lt;p&gt;3 网桥 docker0 创建一对对等虚拟设备接口一个叫 veth，另一个叫 eth0，成对匹配。&lt;/p&gt;
&lt;p&gt;3.1 整个宿主机的网桥模式都是 docker0，类似一个交换机有一堆接口，每个接口叫 veth，在本地主机和容器内分别创建一个虚拟接口，并让他们彼此联通（这样一对接口叫 veth pair）；&lt;/p&gt;
&lt;p&gt;3.2 每个容器实例内部也有一块网卡，每个接口叫 eth0；&lt;/p&gt;
&lt;p&gt;3.3 docker0 上面的每个 veth 匹配某个容器实例内部的 eth0，两两配对，一一匹配。&lt;/p&gt;
&lt;p&gt;通过上述，将宿主机上的所有容器都连接到这个内部网络上，两个容器在同一个网络下，会从这个网关下各自拿到分配的 ip，此时两个容器的网络是互通的。&lt;/p&gt;
&lt;h5 id=&#34;10032-host&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10032-host&#34;&gt;#&lt;/a&gt; 10.0.3.2 host&lt;/h5&gt;
&lt;p&gt;直接使用宿主机的 IP 地址与外界进行通信，不再需要额外进行 NAT 转换。&lt;/p&gt;
&lt;p&gt;容器将不会获得一个独立的 Network Namespace， 而是和宿主机共用一个 Network Namespace。容器将不会虚拟出自己的网卡而是使用宿主机的 IP 和端口。&lt;/p&gt;
&lt;p&gt;docker run -d  -p 8083:8083 --network host  --name …&lt;/p&gt;
&lt;h5 id=&#34;10033-none&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10033-none&#34;&gt;#&lt;/a&gt; 10.0.3.3 none&lt;/h5&gt;
&lt;p&gt;禁用网络功能只有 lo 标识&lt;/p&gt;
&lt;p&gt;docker run -d  -p 8083:8083 --network none --name …&lt;/p&gt;
&lt;h5 id=&#34;10034-container&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10034-container&#34;&gt;#&lt;/a&gt; 10.0.3.4 container&lt;/h5&gt;
&lt;p&gt;container ⽹络模式&lt;/p&gt;
&lt;p&gt;新建的容器和已经存在的一个容器共享一个网络 ip 配置而不是和宿主机共享。新创建的容器不会创建自己的网卡，配置自己的 IP，而是和一个指定的容器共享 IP、端口范围等。同样，两个容器除了网络方面，其他的如文件系统、进程列表等还是隔离的。&lt;/p&gt;
&lt;p&gt;docker run -it --network container:alpine1 --name …&lt;/p&gt;
&lt;h4 id=&#34;1011-docker-平台架构图解&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1011-docker-平台架构图解&#34;&gt;#&lt;/a&gt; 10.1.1 docker 平台架构图解&lt;/h4&gt;
&lt;h5 id=&#34;10111整体说明&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10111整体说明&#34;&gt;#&lt;/a&gt; 10.1.1.1. 整体说明&lt;/h5&gt;
&lt;p&gt;从其架构和运行流程来看，Docker 是一个 C/S 模式的架构，后端是一个松耦合架构，众多模块各司其职。&lt;/p&gt;
&lt;p&gt;Docker 运行的基本流程为：&lt;/p&gt;
&lt;p&gt;1 用户是使用 Docker Client 与 Docker Daemon 建立通信，并发送请求给后者。&lt;/p&gt;
&lt;p&gt;2 Docker Daemon 作为 Docker 架构中的主体部分，首先提供 Docker Server 的功能使其可以接受 Docker Client 的请求。&lt;/p&gt;
&lt;p&gt;3 Docker Engine 执行 Docker 内部的一系列工作，每一项工作都是以一个 Job 的形式的存在。&lt;/p&gt;
&lt;p&gt;4 Job 的运行过程中，当需要容器镜像时，则从 Docker Registry 中下载镜像，并通过镜像管理驱动 Graph driver 将下载镜像以 Graph 的形式存储。&lt;/p&gt;
&lt;p&gt;5 当需要为 Docker 创建网络环境时，通过网络管理驱动 Network driver 创建并配置 Docker 容器网络环境。&lt;/p&gt;
&lt;p&gt;6 当需要限制 Docker 容器运行资源或执行用户指令等操作时，则通过 Execdriver 来完成。&lt;/p&gt;
&lt;p&gt;7 Libcontainer 是一项独立的容器管理包，Network driver 以及 Exec driver 都是通过 Libcontainer 来实现具体对容器进行的操作。&lt;/p&gt;
&lt;h5 id=&#34;10112整体架构&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#10112整体架构&#34;&gt;#&lt;/a&gt; 10.1.1.2. 整体架构&lt;/h5&gt;
&lt;p&gt;&lt;img data-src=&#34;/jiagou.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;h3 id=&#34;110-docker-compose-容器编排&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#110-docker-compose-容器编排&#34;&gt;#&lt;/a&gt; 11.0 Docker-compose 容器编排&lt;/h3&gt;
&lt;h4 id=&#34;1101-是什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1101-是什么&#34;&gt;#&lt;/a&gt; 11.0.1 是什么？&lt;/h4&gt;
&lt;p&gt;Docker-Compose 是 Docker 官方的开源项目，负责实现对容器集群的快速编排&lt;/p&gt;
&lt;h4 id=&#34;1102-能干什么&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1102-能干什么&#34;&gt;#&lt;/a&gt; 11.0.2 能干什么？&lt;/h4&gt;
&lt;p&gt;docker 建议我们每一个容器中只运行一个服务，因为 docker 容器本身占用资源极少，所以最好是将每个服务单独的分割开来但是这样我们又面临了一个问题？&lt;/p&gt;
&lt;p&gt;如果我需要同时部署好多个服务，难道要每个服务单独写 Dockerfile 然后在构建镜像，构建容器，这样累都累死了，所以 docker 官方给我们提供了 docker-compose 多服务部署的工具&lt;/p&gt;
&lt;p&gt;例如要实现一个 Web 微服务项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库 mysql 服务容器，redis 服务器，注册中心 eureka，甚至还包括负载均衡容器等等。。。。。。&lt;/p&gt;
&lt;p&gt;Compose 允许用户通过一个单独的 docker-compose.yml 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。&lt;/p&gt;
&lt;p&gt;可以很容易地用一个配置文件定义一个多容器的应用，然后使用一条指令安装这个应用的所有依赖，完成构建。Docker-Compose 解决了容器与容器之间如何管理编排的问题。&lt;/p&gt;
&lt;h4 id=&#34;1103-去哪里下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1103-去哪里下载&#34;&gt;#&lt;/a&gt; 11.0.3 去哪里下载？&lt;/h4&gt;
&lt;p&gt;下载：&lt;/p&gt;
&lt;p&gt;1.curl -L “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2RvY2tlci9jb21wb3NlL3JlbGVhc2VzL2Rvd25sb2FkLzEuMjkuMi9kb2NrZXItY29tcG9zZS0=&#34;&gt;https://github.com/docker/compose/releases/download/1.29.2/docker-compose-&lt;/span&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;u&lt;/mi&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mi&gt;m&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;s&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;(uname -s)-&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;u&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;m&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;(uname -m)” -o /usr/local/bin/docker-compose&lt;/p&gt;
&lt;p&gt;2.chmod +x /usr/local/bin/docker-compose&lt;/p&gt;
&lt;p&gt;3.docker-compose --version&lt;/p&gt;
&lt;p&gt;卸载：&lt;/p&gt;
&lt;p&gt;sudo rm /usr/local/bin/docker-compose&lt;/p&gt;
&lt;h4 id=&#34;1104-compose核心概念&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1104-compose核心概念&#34;&gt;#&lt;/a&gt; 11.0.4 Compose 核心概念&lt;/h4&gt;
&lt;p&gt;1. 一文件 docker-compose.yml&lt;/p&gt;
&lt;p&gt;2. 两要素&lt;/p&gt;
&lt;p&gt;（1）. 服务：一个个应用容器实例，比如订单微服务，库存微服务，mysql 容器。&lt;/p&gt;
&lt;p&gt;（2）. 工程：由一组关联的应用容器组成的一个完整业务单元，在 docker-compose.yml 文件中定义。&lt;/p&gt;
&lt;h4 id=&#34;1105-compose常用命令&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1105-compose常用命令&#34;&gt;#&lt;/a&gt; 11.0.5 Compose 常用命令&lt;/h4&gt;
&lt;p&gt;&lt;strong&gt;Compose**** 常用命令&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;docker-compose -h              # 查看帮助&lt;/p&gt;
&lt;p&gt;docker-compose up              # 启动所有 docker-compose 服务&lt;/p&gt;
&lt;p&gt;docker-compose up -d             # 启动所有 docker-compose 服务并后台运行&lt;/p&gt;
&lt;p&gt;docker-compose down             # 停止并删除容器、网络、卷、镜像。&lt;/p&gt;
&lt;p&gt;docker-compose exec  yml 里面的服务 id         # 进入容器实例内部 docker-compose exec docker-compose.yml 文件中写的服务 id /bin/bash&lt;/p&gt;
&lt;p&gt;docker-compose ps            # 展示当前 docker-compose 编排过的运行的所有容器&lt;/p&gt;
&lt;p&gt;docker-compose top           # 展示当前 docker-compose 编排过的容器进程&lt;/p&gt;
&lt;p&gt;docker-compose logs  yml 里面的服务 id   # 查看容器输出日志&lt;/p&gt;
&lt;p&gt;docker-compose config   # 检查配置&lt;/p&gt;
&lt;p&gt;docker-compose config -q # 检查配置，有问题才有输出&lt;/p&gt;
&lt;p&gt;docker-compose restart  # 重启服务&lt;/p&gt;
&lt;p&gt;docker-compose start   # 启动服务&lt;/p&gt;
&lt;p&gt;docker-compose stop    # 停止服务&lt;/p&gt;
&lt;h4 id=&#34;1106-compose使用的三个步骤&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1106-compose使用的三个步骤&#34;&gt;#&lt;/a&gt; 11.0.6 Compose 使用的三个步骤&lt;/h4&gt;
&lt;p&gt;1. 编写 Dockerfile 定义各个微服务应用并构建出对应的镜像文件&lt;/p&gt;
&lt;p&gt;2. 使用 docker-compose.yml 定义一个完整业务单元，安排好整体应用中的各个容器服务&lt;/p&gt;
&lt;p&gt;3. 最后执行 docker-compose up 命令并启动运行整个应用程序，完成一键部署上线&lt;/p&gt;
&lt;h4 id=&#34;1107-compose编排微服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#1107-compose编排微服务&#34;&gt;#&lt;/a&gt; 11.0.7 Compose 编排微服务&lt;/h4&gt;
&lt;p&gt;1.package 把项目打包，放在与 docker-compose.yml 和 Dockerfile 同个目录下&lt;/p&gt;
&lt;p&gt;2. 编写 docker-compose.yml 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &amp;quot;3&amp;quot;

 

services:

  microService:

    image: zzyy_docker:1.6

    container_name: ms01

    ports:

      - &amp;quot;6001:6001&amp;quot;

    volumes:

      - /app/microService:/data

    networks: 

      - atguigu_net 

    depends_on: 

      - redis

      - mysql

 

  redis:

    image: redis:6.0.8

    ports:

      - &amp;quot;6379:6379&amp;quot;

    volumes:

      - /app/redis/redis.conf:/etc/redis/redis.conf

      - /app/redis/data:/data

    networks: 

      - atguigu_net

    command: redis-server /etc/redis/redis.conf

 

  mysql:

    image: mysql:5.7

    environment:

      MYSQL_ROOT_PASSWORD: &#39;123456&#39;

      MYSQL_ALLOW_EMPTY_PASSWORD: &#39;no&#39;

      MYSQL_DATABASE: &#39;db2021&#39;

      MYSQL_USER: &#39;zzyy&#39;

      MYSQL_PASSWORD: &#39;zzyy123&#39;

    ports:

       - &amp;quot;3306:3306&amp;quot;

    volumes:

       - /app/mysql/db:/var/lib/mysql

       - /app/mysql/conf/my.cnf:/etc/my.cnf

       - /app/mysql/init:/docker-entrypoint-initdb.d

    networks:

      - atguigu_net

    command: --default-authentication-plugin=mysql_native_password #解决外部无法访问

 

networks: 

   atguigu_net: 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3. 编写 Dockerfile 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;# 基础镜像使用java

FROM java:8

# 作者

MAINTAINER zzyy

# VOLUME 指定临时文件目录为/tmp，在主机/var/lib/docker目录下创建了一个临时文件并链接到容器的/tmp

VOLUME /tmp

# 将jar包添加到容器中并更名为zzyy_docker.jar

ADD docker_boot-0.0.1-SNAPSHOT.jar zzyy_docker.jar

# 运行jar包

RUN bash -c &#39;touch /zzyy_docker.jar&#39;

ENTRYPOINT [&amp;quot;java&amp;quot;,&amp;quot;-jar&amp;quot;,&amp;quot;/zzyy_docker.jar&amp;quot;]

#暴露6001端口作为微服务

EXPOSE 6001
&lt;/code&gt;&lt;/pre&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;docker build -t zzyy_docker:1.6 .&lt;/li&gt;
&lt;li&gt;执行 docker-compose up 或者 docker-compose up -d&lt;/li&gt;
&lt;li&gt;关闭 docker-compose stop&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;130-docker-轻量级可视化工具portainer&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#130-docker-轻量级可视化工具portainer&#34;&gt;#&lt;/a&gt; 13.0 Docker 轻量级可视化工具 Portainer&lt;/h3&gt;
&lt;p&gt;1. 是什么？&lt;/p&gt;
&lt;p&gt;Portainer 是一款轻量级的应用，它提供了图形化界面，用于方便地管理 Docker 环境，包括单机环境和集群环境。&lt;/p&gt;
&lt;p&gt;2. 安装&lt;/p&gt;
&lt;p&gt;（1）. 命令&lt;/p&gt;
&lt;p&gt;docker run -d -p 8000:8000 -p 9000:9000 --name portainer   --restart=always   -v /var/run/docker.sock:/var/run/docker.sock   -v portainer_data:/data   portainer/portainer&lt;/p&gt;
&lt;p&gt;（2）. 设置账号密码&lt;/p&gt;
&lt;p&gt;（3）. 地址 ip:9000&lt;/p&gt;
&lt;h3 id=&#34;140-docker-容器监控之cadvisorinfluxdbgranfana&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#140-docker-容器监控之cadvisorinfluxdbgranfana&#34;&gt;#&lt;/a&gt; 14.0 Docker 容器监控之 CAdvisor+InfluxDB+Granfana&lt;/h3&gt;
&lt;p&gt;1. 监控&lt;/p&gt;
&lt;p&gt;docker stats&lt;/p&gt;
&lt;p&gt;2.CAdvisor+InfluxDB+Granfana&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E6%9B%B9%E9%AB%98%E5%9F%8E%5CDesktop%5Cdockerimages%5CCAdvisor.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E6%9B%B9%E9%AB%98%E5%9F%8E%5CDesktop%5Cdockerimages%5CInfluxDB.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;C:%5CUsers%5C%E6%9B%B9%E9%AB%98%E5%9F%8E%5CDesktop%5Cdockerimages%5CGranfana.png&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;2. 创建 cig 文件夹，新建 docker-compose.yml&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;version: &#39;3.1&#39;

 

volumes:

  grafana_data: &amp;#123;&amp;#125;

 

services:

 influxdb:

  image: tutum/influxdb:0.9

  restart: always

  environment:

    - PRE_CREATE_DB=cadvisor

  ports:

    - &amp;quot;8083:8083&amp;quot;

    - &amp;quot;8086:8086&amp;quot;

  volumes:

    - ./data/influxdb:/data

 

 cadvisor:

  image: google/cadvisor

  links:

    - influxdb:influxsrv

  command: -storage_driver=influxdb -storage_driver_db=cadvisor -storage_driver_host=influxsrv:8086

  restart: always

  ports:

    - &amp;quot;8080:8080&amp;quot;

  volumes:

    - /:/rootfs:ro

    - /var/run:/var/run:rw

    - /sys:/sys:ro

    - /var/lib/docker/:/var/lib/docker:ro

 

 grafana:

  user: &amp;quot;104&amp;quot;

  image: grafana/grafana

  user: &amp;quot;104&amp;quot;

  restart: always

  links:

    - influxdb:influxsrv

  ports:

    - &amp;quot;3000:3000&amp;quot;

  volumes:

    - grafana_data:/var/lib/grafana

  environment:

    - HTTP_USER=admin

    - HTTP_PASS=admin

    - INFLUXDB_HOST=influxsrv

    - INFLUXDB_PORT=8086

    - INFLUXDB_NAME=cadvisor

    - INFLUXDB_USER=root

    - INFLUXDB_PASS=root
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;3.docker-compose up&lt;/p&gt;
&lt;ol start=&#34;4&#34;&gt;
&lt;li&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;（1）. 浏览 cAdvisor 收集服务 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjgwODA=&#34;&gt;http://ip:8080&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（2）. 浏览 influxdb 存储服务 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjgwODM=&#34;&gt;http://ip:8083&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;（3）. 浏览 grafana 展现服务  &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2lwOjMwMDA=&#34;&gt;http://ip:3000&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Docker" />
        <updated>2022-05-02T12:56:48.000Z</updated>
    </entry>
    <entry>
        <id>https://hahayixiao2.github.io/computer-science/container/DockerCompose%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/dockercompose/</id>
        <title>dockercompose笔记</title>
        <link rel="alternate" href="https://hahayixiao2.github.io/computer-science/container/DockerCompose%E5%85%A5%E9%97%A8%E5%AD%A6%E4%B9%A0/dockercompose/"/>
        <content type="html">&lt;h1 id=&#34;docker-compose入门学习&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker-compose入门学习&#34;&gt;#&lt;/a&gt; Docker Compose 入门学习&lt;/h1&gt;
&lt;h2 id=&#34;简介&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#简介&#34;&gt;#&lt;/a&gt; 简介&lt;/h2&gt;
&lt;p&gt;我们之前操作 Docker 的过程是：DockerFile  build run 进行手动操作，单个容器，如果假设我们有 100 个微服务，并行微服务之间还存在依赖关系。这个时候，我们就可以使用 Docker Compose 来轻松高效的管理容器，定义运行多个容器。&lt;/p&gt;
&lt;h3 id=&#34;官方介绍&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#官方介绍&#34;&gt;#&lt;/a&gt; 官方介绍：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;定义、运行多个容器&lt;/li&gt;
&lt;li&gt;YAML file 配置环境&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Compose 是一个用于定义和运行多容器 Docker 应用程序的工具。使用 Compose，您可以使用 YAML 文件来配置应用程序的服务。然后，使用一个命令，就可以从配置中创建并启动所有服务。要了解有关 Compose 的所有特性的更多信息，请参阅&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS8jZmVhdHVyZXM=&#34;&gt;特性列表&lt;/span&gt;。&lt;/p&gt;
&lt;p&gt;Compose 可以在所有环境中工作：生产、阶段、开发、测试，以及 CI 工作流。您可以在常见用例中了解关于每个用例的更多信息&lt;/p&gt;
&lt;p&gt;使用 Compose 基本上有三个步骤:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用 Dockerfile 定义你的应用程序的环境，这样它就可以在任何地方复制。&lt;/li&gt;
&lt;li&gt;在 Docker-compose 中定义组成应用程序的服务。这样它们就可以在一个独立的环境中一起运行。&lt;/li&gt;
&lt;li&gt;运行 docker-compose up 和 Compose 启动并运行整个应用程序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;作用&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#作用&#34;&gt;#&lt;/a&gt; 作用&lt;/h3&gt;
&lt;p&gt;批量容器编排&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Compose 是 Docker 官方的开源项目，需要安装！&lt;/p&gt;
&lt;p&gt;Dockerfile 让程序在任何地方运行，web 服务。Redis、MySQL、Nginx。。。多个容器&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;Compose 的 YAML 文件如下所示&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;2.0&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; .&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;5000:5000&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; .&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; logvolume01&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/log&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;links&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;logvolume01&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;docker-compose up 100 个服务，也可以一键启动&lt;/p&gt;
&lt;p&gt;Compose：重要的概念&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务 service，容器，应用（web，redis，mysql）&lt;/li&gt;
&lt;li&gt;项目 project，就是一组关联的容器。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;常见的docker-compose脚本&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#常见的docker-compose脚本&#34;&gt;#&lt;/a&gt; 常见的 Docker Compose 脚本&lt;/h2&gt;
&lt;p&gt;下面这个是小伙伴开源的一些 Docker Compose 脚本，我们如果需要部署某个应用的时候，可以通过下面脚本，非常方便的进行部署&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vemhlbmdxaW5neWEvZG9ja2VyLWNvbXBvc2U=&#34;&gt;https://gitee.com/zhengqingya/docker-compose&lt;/span&gt;&lt;/p&gt;
&lt;h2 id=&#34;安装docker-compose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#安装docker-compose&#34;&gt;#&lt;/a&gt; 安装 Docker Compose&lt;/h2&gt;
&lt;p&gt;官方文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS9pbnN0YWxsLw==&#34;&gt;https://docs.docker.com/compose/install/&lt;/span&gt;&lt;/p&gt;
&lt;h3 id=&#34;下载&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#下载&#34;&gt;#&lt;/a&gt; 下载&lt;/h3&gt;
&lt;p&gt;首先我们先安装一下 Docker&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# yum 安装&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;yum -y &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; docker-ce&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;#查看 docker 版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; --version  &lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 设置开机自启&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl &lt;span class=&#34;token builtin class-name&#34;&gt;enable&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 启动 docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;systemctl start &lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后下载 docker-compose&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;curl&lt;/span&gt; -L &lt;span class=&#34;token string&#34;&gt;&#34;https://github.com/docker/compose/releases/download/1.26.2/docker-compose-&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;uname&lt;/span&gt; -s&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;-&lt;span class=&#34;token variable&#34;&gt;&lt;span class=&#34;token variable&#34;&gt;$(&lt;/span&gt;&lt;span class=&#34;token function&#34;&gt;uname&lt;/span&gt; -m&lt;span class=&#34;token variable&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&#34;&lt;/span&gt; -o /usr/local/bin/docker-compose&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;授权&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#授权&#34;&gt;#&lt;/a&gt; 授权&lt;/h3&gt;
&lt;p&gt;下载完成后，我们进入到下面的目录&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; /usr/local/bin&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后加入执行权限&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;sudo&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;chmod&lt;/span&gt; +x &lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;查看是否安装成功&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; version&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;创建文件体验&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建文件体验&#34;&gt;#&lt;/a&gt; 创建文件体验&lt;/h3&gt;
&lt;p&gt;在这个页面中，您将构建一个运行在 Docker 撰写器上的简单 Python web 应用程序。该应用程序使用了烧瓶框架，并在 Redis 中维护了一个命中计数器。虽然示例使用 Python，但是即使您不熟悉它，这里演示的概念也应该可以理解。&lt;/p&gt;
&lt;p&gt;确保你已经安装了 Docker 引擎和 Docker 组合。你不需要安装 Python 或 Redis，因为它们都是由 Docker images 提供的。&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; composetest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 进入该文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; composetest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后我们需要创建一个 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FwcC5weQ==&#34;&gt;app.py&lt;/span&gt; 文件&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; &lt;span class=&#34;token function&#34;&gt;time&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;from flask &lt;span class=&#34;token function&#34;&gt;import&lt;/span&gt; Flask&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;app &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; Flask&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;__name__&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;cache &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; redis.Redis&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;host&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;redis&#39;&lt;/span&gt;, &lt;span class=&#34;token assign-left variable&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;def get_hit_count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    retries &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;5&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token keyword&#34;&gt;while&lt;/span&gt; True:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        try:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token builtin class-name&#34;&gt;return&lt;/span&gt; cache.incr&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;hits&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;        except redis.exceptions.ConnectionError as exc:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            &lt;span class=&#34;token keyword&#34;&gt;if&lt;/span&gt; retries &lt;span class=&#34;token operator&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;0&lt;/span&gt;:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;                raise exc&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            retries -&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;            time.sleep&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;0.5&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;@app.route&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#39;/&#39;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;def hello&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    count &lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt; get_hit_count&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token builtin class-name&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;Hello World! I have been seen &amp;#123;&amp;#125; times.\n&#39;&lt;/span&gt;.format&lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;count&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后创建一个 requirements.txt 文件，里面需要依赖包&lt;/p&gt;
&lt;figure class=&#34;highlight py&#34;&gt;&lt;figcaption data-lang=&#34;Python&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;flask&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;创建docker-file&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#创建docker-file&#34;&gt;#&lt;/a&gt; 创建 Docker file&lt;/h3&gt;
&lt;p&gt;在这个步骤中，您将编写一个构建 Docker 映像的 Dockerfile。该映像包含 Python 应用程序需要的所有依赖项，包括 Python 本身。在您的项目目录中，创建一个名为 Dockerfile 的文件，并粘贴以下内容:&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;FROM python:3.7-alpine&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;WORKDIR /code&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ENV FLASK_APP app.py&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ENV FLASK_RUN_HOST &lt;span class=&#34;token number&#34;&gt;0.0&lt;/span&gt;.0.0&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;RUN apk &lt;span class=&#34;token function&#34;&gt;add&lt;/span&gt; --no-cache gcc musl-dev linux-headers&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;COPY requirements.txt requirements.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;RUN pip &lt;span class=&#34;token function&#34;&gt;install&lt;/span&gt; -r requirements.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;EXPOSE &lt;span class=&#34;token number&#34;&gt;5000&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;COPY &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt; &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;CMD &lt;span class=&#34;token punctuation&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;token string&#34;&gt;&#34;flask&#34;&lt;/span&gt;, &lt;span class=&#34;token string&#34;&gt;&#34;run&#34;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;]&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;上述代码中，是为了告诉 Docker&lt;/p&gt;
&lt;p&gt;从 Python3.7 版本开始构建镜像&lt;/p&gt;
&lt;p&gt;将当前目录设置为 /code&lt;/p&gt;
&lt;p&gt;安装 python 依赖项&lt;/p&gt;
&lt;p&gt;将容器的默认命令设置为 python &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FwcC5weQ==&#34;&gt;app.py&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;定义服务在compose文件中&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#定义服务在compose文件中&#34;&gt;#&lt;/a&gt; 定义服务在 Compose 文件中&lt;/h3&gt;
&lt;p&gt;创建一个名为 docker-compose 的文件。yml 在您的项目目录，并粘贴以下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;version: &lt;span class=&#34;token string&#34;&gt;&#39;3&#39;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;services:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  web:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    build: &lt;span class=&#34;token builtin class-name&#34;&gt;.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    ports:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      - &lt;span class=&#34;token string&#34;&gt;&#34;5000:5000&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  redis:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    image: &lt;span class=&#34;token string&#34;&gt;&#34;redis:alpine&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;此 Compose 文件定义了两个服务，web 和 redis，该 web 服务使用从 Docker file 当前目录中构建的镜像&lt;/p&gt;
&lt;p&gt;将容器上的公开端口 5000&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这个合成文件定义了两个服务:web 和 redis。&lt;/p&gt;
&lt;h4 id=&#34;web服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#web服务&#34;&gt;#&lt;/a&gt; Web 服务&lt;/h4&gt;
&lt;p&gt;web 服务使用从当前目录中的 Dockerfile 构建的映像。然后，它将容器和主机绑定到公开的端口 5000。这个示例服务使用了 Flask web 服务器 5000 的默认端口&lt;/p&gt;
&lt;h4 id=&#34;redis服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#redis服务&#34;&gt;#&lt;/a&gt; Redis 服务&lt;/h4&gt;
&lt;p&gt;redis 服务使用从 Docker Hub 注册中心提取的公共 redis 图像&lt;/p&gt;
&lt;h3 id=&#34;使用compose构建和运行应用程序&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#使用compose构建和运行应用程序&#34;&gt;#&lt;/a&gt; 使用 Compose 构建和运行应用程序&lt;/h3&gt;
&lt;p&gt;在项目目录中，通过运行启动应用程序   &lt;code&gt;docker-compose up&lt;/code&gt; .&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; up&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;运行结果如下&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Creating network &lt;span class=&#34;token string&#34;&gt;&#34;composetest_default&#34;&lt;/span&gt; with the default driver&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Creating composetest_web_1 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Creating composetest_redis_1 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Creating composetest_web_1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Creating composetest_redis_1 &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;. &lt;span class=&#34;token keyword&#34;&gt;done&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;Attaching to composetest_web_1, composetest_redis_1&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;web_1    &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;  * Running on http://0.0.0.0:5000/ &lt;span class=&#34;token punctuation&#34;&gt;(&lt;/span&gt;Press CTRL+C to quit&lt;span class=&#34;token punctuation&#34;&gt;)&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:C &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.480 &lt;span class=&#34;token comment&#34;&gt;# oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:C &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.480 &lt;span class=&#34;token comment&#34;&gt;# Redis version=4.0.1, bits=64, commit=00000000, modified=0, pid=1, just started&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:C &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.480 &lt;span class=&#34;token comment&#34;&gt;# Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;web_1    &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;  * Restarting with &lt;span class=&#34;token function&#34;&gt;stat&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:M &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.483 * Running &lt;span class=&#34;token assign-left variable&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;standalone, &lt;span class=&#34;token assign-left variable&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;token operator&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;6379&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:M &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.483 &lt;span class=&#34;token comment&#34;&gt;# WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;web_1    &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;  * Debugger is active&lt;span class=&#34;token operator&#34;&gt;!&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:M &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.483 &lt;span class=&#34;token comment&#34;&gt;# Server initialized&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:M &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.483 &lt;span class=&#34;token comment&#34;&gt;# WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command &#39;echo never &gt; /sys/kernel/mm/transparent_hugepage/enabled&#39; as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled.&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;web_1    &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt;  * Debugger PIN: &lt;span class=&#34;token number&#34;&gt;330&lt;/span&gt;-787-903&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;redis_1  &lt;span class=&#34;token operator&#34;&gt;|&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;:M &lt;span class=&#34;token number&#34;&gt;17&lt;/span&gt; Aug &lt;span class=&#34;token number&#34;&gt;22&lt;/span&gt;:11:10.483 * Ready to accept connections&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;最后查看服务是否启动成功&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cgc-blog.oss-cn-beijing.aliyuncs.com/container/docker/image-20200727212451516.png&#34; alt=&#34;image-20200727212451516&#34;&gt;&lt;/p&gt;
&lt;p&gt;使用 docker images 命令，我们发现在 docker compose 中的镜像都已经下载好了&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://cgc-blog.oss-cn-beijing.aliyuncs.com/container/docker/image-20200727212555232.png&#34; alt=&#34;image-20200727212555232&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;网络规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#网络规则&#34;&gt;#&lt;/a&gt; 网络规则&lt;/h3&gt;
&lt;p&gt;使用下面的命令，就可以查看到 docker 中的网络&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; network &lt;span class=&#34;token function&#34;&gt;ls&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://cgc-blog.oss-cn-beijing.aliyuncs.com/container/docker/image-20200727212932704.png&#34; alt=&#34;image-20200727212932704&#34;&gt;&lt;/p&gt;
&lt;p&gt;通过 compose 构建的服务，compose 帮我们维护了，都会在一个网络下面，就可以通过域名访问&lt;/p&gt;
&lt;p&gt;我们通过以下命令来进行查看，发现启动的两个服务，就是同处于同一个网络下的&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker&lt;/span&gt; network inspect composetest_default&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;&lt;img data-src=&#34;https://cgc-blog.oss-cn-beijing.aliyuncs.com/container/docker/image-20200727213527466.png&#34; alt=&#34;image-20200727213527466&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;关闭docker-compose&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#关闭docker-compose&#34;&gt;#&lt;/a&gt; 关闭 docker compose&lt;/h3&gt;
&lt;p&gt;可以使用一下命令退出&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt; down&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 或者&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;ctrl + c&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;我们可以对上述的操作，进行一下总结，就可以分为一下几个步骤&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL2FwcC5weQ==&#34;&gt;app.py&lt;/span&gt;&lt;/li&gt;
&lt;li&gt;Docker file  将应用程序打包成镜像&lt;/li&gt;
&lt;li&gt;Docker-compose yaml 文件（定义整个服务，需要的环境，web、redis）完整的上线服务&lt;/li&gt;
&lt;li&gt;启动 compose 项目（docker-compose up）&lt;/li&gt;
&lt;li&gt;流程
&lt;ul&gt;
&lt;li&gt;创建网络&lt;/li&gt;
&lt;li&gt;执行 Docker-compose yaml&lt;/li&gt;
&lt;li&gt;启动服务&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;原来我们没有用到 docker-compose 的时候，都是需要使用 docker run，一个个的运行我们的容器&lt;/p&gt;
&lt;p&gt;通过 docker-compose，我们编写 yaml 文件，可以通过 docker-compose 一键启动服务，或者停止。&lt;/p&gt;
&lt;h2 id=&#34;yaml规则&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#yaml规则&#34;&gt;#&lt;/a&gt; yaml 规则&lt;/h2&gt;
&lt;p&gt;docker-compose.yaml 规则&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 三层&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;version: &lt;span class=&#34;token string&#34;&gt;&#34;3.8&#34;&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 定义版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;services:       &lt;span class=&#34;token comment&#34;&gt;# 定义服务&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   服务1:web&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       images&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       build&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       network&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;	   &lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   服务2:redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   		&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   服务3:nginx&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   		&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;..&lt;/span&gt;.&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token comment&#34;&gt;# 其它配置 网络 / 卷、全局规则&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  volumes:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  networks:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  configs:&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;完整实例如下&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3.8&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; redis&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;deploy&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token key atrule&#34;&gt;replicas&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token number&#34;&gt;1&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; my_config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; my_other_config&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;configs&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;my_config&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; ./my_config.txt&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;my_other_config&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;external&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token boolean important&#34;&gt;true&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h3 id=&#34;依赖关系&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#依赖关系&#34;&gt;#&lt;/a&gt; 依赖关系&lt;/h3&gt;
&lt;p&gt;如果我们的项目还有依赖关系，比如  web 依赖于 redis，也就是说项目需要首先启动 redis&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;3.8&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;web&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;build&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; .&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; db&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;      &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;redis&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; redis&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;  &lt;span class=&#34;token key atrule&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; postgres&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;h2 id=&#34;快速搭建wordpress&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#快速搭建wordpress&#34;&gt;#&lt;/a&gt; 快速搭建 WordPress&lt;/h2&gt;
&lt;p&gt;官网搭建文档：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLmRvY2tlci5jb20vY29tcG9zZS93b3JkcHJlc3Mv&#34;&gt;https://docs.docker.com/compose/wordpress/&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;首先创建项目的文件夹&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 创建文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;mkdir&lt;/span&gt; my_wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token comment&#34;&gt;# 进入文件夹&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token builtin class-name&#34;&gt;cd&lt;/span&gt; my_wordpress/&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;然后创建一个 docker-compose.yml 文件&lt;/p&gt;
&lt;figure class=&#34;highlight yaml&#34;&gt;&lt;figcaption data-lang=&#34;YAML&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;version&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#39;3.3&#39;&lt;/span&gt; &lt;span class=&#34;token comment&#34;&gt;# 定义版本&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;2&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;3&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;services&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;4&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;db&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;5&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; mysql&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;5.7&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;6&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;7&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; db_data&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;/var/lib/mysql&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;8&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;9&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;10&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_ROOT_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; somewordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;11&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_DATABASE&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;12&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_USER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;13&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;MYSQL_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;14&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;15&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;   &lt;span class=&#34;token key atrule&#34;&gt;wordpress&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;16&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;depends_on&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;  &lt;span class=&#34;token comment&#34;&gt;# 依赖于上一个 db，也就是需要 db 启动&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;17&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; db&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;18&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;image&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;latest&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;19&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;ports&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;20&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token punctuation&#34;&gt;-&lt;/span&gt; &lt;span class=&#34;token string&#34;&gt;&#34;8000:80&#34;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;21&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;restart&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; always&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;22&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;     &lt;span class=&#34;token key atrule&#34;&gt;environment&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;23&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_HOST&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; db&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;token number&#34;&gt;3306&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;24&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_USER&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;25&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_PASSWORD&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;26&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;       &lt;span class=&#34;token key atrule&#34;&gt;WORDPRESS_DB_NAME&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; wordpress&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;27&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token key atrule&#34;&gt;volumes&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;tr&gt;&lt;td data-num=&#34;28&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;    &lt;span class=&#34;token key atrule&#34;&gt;db_data&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;token punctuation&#34;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&#34;token punctuation&#34;&gt;&amp;#125;&lt;/span&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;后台启动项目&lt;/p&gt;
&lt;figure class=&#34;highlight bash&#34;&gt;&lt;figcaption data-lang=&#34;bash&#34;&gt;&lt;/figcaption&gt;&lt;table&gt;&lt;tr&gt;&lt;td data-num=&#34;1&#34;&gt;&lt;/td&gt;&lt;td&gt;&lt;pre&gt;&lt;span class=&#34;token function&#34;&gt;docker-compose&lt;/span&gt;  -d&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;p&gt;到此为止，项目已经成功搭建完毕&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;正常的开源项目，可能还需要依赖 build 后的 jar 包，所以我们还需要使用 Dockerfile&lt;/p&gt;
&lt;p&gt;当我们的文件准备齐全的时候，就可以一键启动项目&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;未来的趋势：linux、docker、k8s&lt;/p&gt;
&lt;p&gt;掌握：docker 基础、原理、网络、服务、集群、错误排查、日志。&lt;/p&gt;
&lt;h2 id=&#34;docker-compose搭建微服务&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker-compose搭建微服务&#34;&gt;#&lt;/a&gt; docker-compose 搭建微服务&lt;/h2&gt;
&lt;p&gt;我们可以使用下面命令 ，创建一个 SpringBoot 项目：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zdGFydC5zcHJpbmcuaW8v&#34;&gt;https://start.spring.io/&lt;/span&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写项目微服务&lt;/li&gt;
&lt;li&gt;dockerfile 构建镜像&lt;/li&gt;
&lt;li&gt;创建 docker-compose 来启动项目，进行服务编排&lt;/li&gt;
&lt;li&gt;丢到服务器 docker-compose 启动&lt;/li&gt;
&lt;li&gt;如果出现了问题：使用 docker-compose up  --build（重新构建）&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;docker小结&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#docker小结&#34;&gt;#&lt;/a&gt; Docker 小结&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Docker 镜像 -&amp;gt; 通过 run 命令启动镜像&lt;/li&gt;
&lt;li&gt;Dockerfile 构建镜像（服务打包）&lt;/li&gt;
&lt;li&gt;docker-compose 启动项目（编排、多个微服务 / 环境）&lt;/li&gt;
&lt;li&gt;Docker 网络&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考&#34;&gt;&lt;a class=&#34;markdownIt-Anchor&#34; href=&#34;#参考&#34;&gt;#&lt;/a&gt; 参考&lt;/h2&gt;
&lt;p&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMWt2NDExcTdRYw==&#34;&gt;https://www.bilibili.com/video/BV1kv411q7Qc&lt;/span&gt;&lt;/p&gt;
</content>
        <category term="Docker" />
        <updated>2022-05-02T12:56:48.000Z</updated>
    </entry>
</feed>
